export const types = {"LuaBootstrap":{"name":"LuaBootstrap","type":"LuaBootstrap","doc":"Entry point for registering event handlers. It is accessible through the global object named script.","properties":{"on_init":{"name":"on_init(f)","doc":"Register a callback to be run on mod init.","args":{"f":{"doc":"f :: function():  The function to call. Passing nil will\n   unregister the handler.","name":"f","type":"function()"}},"type":"function"},"on_load":{"name":"on_load(f)","doc":"Register a function to be run on module load.","args":{"f":{"doc":"f :: function():  The function to call. Passing nil will unregister the handler.","name":"f","type":"function()"}},"type":"function"},"on_configuration_changed":{"name":"on_configuration_changed(f)","doc":"Register a function to be run when mod configuration changes.","args":{"f":{"doc":"f :: function(ConfigurationChangedData): \n   The handler for this event. Passing nil will unregister the handler.","name":"f","type":"function(ConfigurationChangedData)"}},"type":"function"},"on_event":{"name":"on_event(event, f)","doc":"Register a handler to run on event or events.","args":{"event":{"doc":"event :: defines.events or array of defines.events or string:  The events or custom-input name to invoke the handler on","name":"event","type":"defines.events or array of defines.events or string"},"f":{"doc":"f :: function(Event):  The handler to run. Passing nil will unregister the handler. The handler\n   will receive a table that contains the key name (of type defines.events) specifying the name\n   of the event it was called to handle, and tick that specifies when the event was created. This table will\n   also contain other fields, depending on the type of the event. See\n    the list of Factorio events for a listing of these additional fields.","name":"f","type":"function(Event)"}},"type":"function"},"generate_event_name":{"name":"generate_event_name() → uint","doc":"Generate a new, unique event ID.","returns":"uint","args":{},"type":"function"},"get_event_handler":{"name":"get_event_handler(event)","doc":"Find the event handler for an event. Parametersevent :: uint:  The event identifier to get a handler forReturn value Reference to the function currently registered as the handler.","args":{"event":{"doc":"event :: uint:  The event identifier to get a handler for","name":"event","type":"uint"}},"type":"function"},"raise_event":{"name":"raise_event(event, table)","doc":"Raise an event.","args":{"event":{"doc":"event :: uint:  ID of the event to raise","name":"event","type":"uint"},"table":{"doc":"table:  Table with extra data. This table will be passed to the event handler.","name":"table"}},"type":"function"}}},"LuaBurner":{"name":"LuaBurner","type":"LuaBurner","doc":"A reference to the burner energy source owned by a specfic LuaEntity or LuaEquipment.","properties":{"owner":{"name":"owner","doc":"The owner of this burner energy source","type":"LuaEntity or LuaEquipment","mode":"[Read-only]"},"inventory":{"name":"inventory","doc":"The fuel inventory.","type":"LuaInventory","mode":"[Read-only]"},"heat":{"name":"heat","doc":"","type":"double","mode":"[Read-Write]"},"heat_capacity":{"name":"heat_capacity","doc":"","type":"double","mode":"[Read-only]"},"remaining_burning_fuel":{"name":"remaining_burning_fuel","doc":"Note:  Writing will silently do nothing if there's no LuaBurner::currently_burning set.","type":"double","mode":"[Read-Write]"},"currently_burning":{"name":"currently_burning","doc":"Note:  Writing automatically handles correcting LuaBurner::remaining_burning_fuel.","type":"LuaItemPrototype","mode":"[Read-Write]"}}},"LuaChunkIterator":{"name":"LuaChunkIterator","type":"LuaChunkIterator","doc":"A chunk iterator can be used for iterating chunks coordinates of a surface."},"LuaCircuitNetwork":{"name":"LuaCircuitNetwork","type":"LuaCircuitNetwork","doc":"A circuit network associated with a given entity, connector, and wire type.","properties":{"get_signal":{"name":"get_signal(SignalID) → int","doc":"ParametersSignalID:  The signal to read.Return value The current value of the signal.","returns":"int","args":{"SignalID":{"doc":"SignalID:  The signal to read.","name":"SignalID"}},"type":"function"},"entity":{"name":"entity","doc":"The entity this circuit network reference is associated with","type":"LuaEntity","mode":"[Read-only]"},"wire_type":{"name":"wire_type","doc":"The wire type this network is associated with.","type":"defines.wire_type","mode":"[Read-only]"},"circuit_connector_id":{"name":"circuit_connector_id","doc":"The circuit connector ID on the associated entity this network was gotten from.","type":"defines.circuit_connector_id","mode":"[Read-only]"},"signals":{"name":"signals","doc":"The circuit network signals last tick.","type":"array of Signal","mode":"[Read-only]"},"network_id":{"name":"network_id","doc":"The circuit networks ID.","type":"uint","mode":"[Read-only]"}}},"LuaCommandProcessor":{"name":"LuaCommandProcessor","type":"LuaCommandProcessor","doc":"Custom game console commands.","properties":{"add_command":{"name":"add_command(name, help, function)","doc":"Add a command.","args":{"name":{"doc":"name :: string:  Name of the command (case sensitive).","name":"name","type":"string"},"help":{"doc":"help :: LocalisedString:  The localised help message.","name":"help","type":"LocalisedString"},"function":{"doc":"function :: function:  The function that will be called when this command is invoked.","name":"function","type":"function"}},"type":"function"},"remove_command":{"name":"remove_command(string) → boolean","doc":"Removes a registered command","returns":"boolean","args":{"string":{"name":"string","type":"string"}},"type":"function"},"commands":{"name":"commands","doc":"The script registered commands","type":"dictionary string → LocalisedString","mode":"[Read-only]"},"game_commands":{"name":"game_commands","doc":"The script registered commands","type":"dictionary string → LocalisedString","mode":"[Read-only]"}}},"LuaVirtualSignalPrototype":{"name":"LuaVirtualSignalPrototype","type":"LuaVirtualSignalPrototype","doc":"Prototype of a virtual signal.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"special":{"name":"special","doc":"If this is a special signal","type":"boolean","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"","type":"LuaGroup","mode":"[Read-only]"}}},"LuaUnitGroup":{"name":"LuaUnitGroup","type":"LuaUnitGroup","doc":"A collection of units moving and attacking together. The engine creates autonomous unit groups to attack\n polluted areas. The script can create and control such groups as well. Groups can accept commands in the\n same manner as regular units.","properties":{"add_member":{"name":"add_member(unit)","doc":"Make a unit a member of this group. Has the same effect as giving a group_command with this","args":{"unit":{"doc":"unit :: LuaEntity","name":"unit","type":"LuaEntity"}},"type":"function"},"set_command":{"name":"set_command(command)","doc":"Give this group a command.  Parameterscommand :: CommandSee alsoLuaEntity::set_command","args":{"command":{"doc":"command :: Command","name":"command","type":"Command"}},"type":"function"},"set_autonomous":{"name":"set_autonomous()","doc":"Make this group autonomous. Autonomous groups will automatically attack polluted areas.","args":{},"type":"function"},"start_moving":{"name":"start_moving()","doc":"Make the group start moving even if some of its members haven't yet arrived.","args":{},"type":"function"},"destroy":{"name":"destroy()","doc":"Dissolve this group. Its members won't be destroyed, they will be merely unlinked from","args":{},"type":"function"},"members":{"name":"members","doc":"Members of this group.","type":"array of LuaEntity","mode":"[Read-only]"},"position":{"name":"position","doc":"Group position. This can have different meanings depending on the group state. When the group","type":"Position","mode":"[Read-only]"},"state":{"name":"state","doc":"Whether this group is gathering, moving or attacking.","type":"defines.group_state","mode":"[Read-only]"},"force":{"name":"force","doc":"The force of this unit group.","type":"LuaForce","mode":"[Read-only]"},"surface":{"name":"surface","doc":"The surface of this unit group.","type":"LuaSurface","mode":"[Read-only]"}}},"LuaTransportLine":{"name":"LuaTransportLine","type":"LuaTransportLine","doc":"One line on a transport belt.","properties":{"clear":{"name":"clear()","doc":"Remove all items from this transport line.","args":{},"type":"function"},"get_item_count":{"name":"get_item_count(item) → uint","doc":"Count some or all items on this line.","returns":"uint","args":{"item":{"doc":"item :: string  (optional):  Prototype name of the item to count. If not specified, count all items.","name":"item","type":"string"}},"type":"function"},"remove_item":{"name":"remove_item(items) → uint","doc":"Remove some items from this line.  Parametersitems :: SimpleItemStack:  Items to remove.Return value Number of items actually removed.","returns":"uint","args":{"items":{"doc":"items :: SimpleItemStack:  Items to remove.","name":"items","type":"SimpleItemStack"}},"type":"function"},"can_insert_at":{"name":"can_insert_at(position) → boolean","doc":"Can an item be inserted at a given position?  Parametersposition :: float:  Where to insert an item.","returns":"boolean","args":{"position":{"doc":"position :: float:  Where to insert an item.","name":"position","type":"float"}},"type":"function"},"can_insert_at_back":{"name":"can_insert_at_back() → boolean","doc":"Can an item be inserted at the back of this line?","returns":"boolean","args":{},"type":"function"},"insert_at":{"name":"insert_at(position, items) → boolean","doc":"Insert items at a given position.   Parametersposition :: float:  Where on the line to insert the items.items :: SimpleItemStack:  Items to insert.Return value Were the items inserted successfully?","returns":"boolean","args":{"position":{"doc":"position :: float:  Where on the line to insert the items.","name":"position","type":"float"},"items":{"doc":"items :: SimpleItemStack:  Items to insert.","name":"items","type":"SimpleItemStack"}},"type":"function"},"insert_at_back":{"name":"insert_at_back(items) → boolean","doc":"Insert items at the back of this line.  Parametersitems :: SimpleItemStackReturn value Were the items inserted successfully?","returns":"boolean","args":{"items":{"doc":"items :: SimpleItemStack","name":"items","type":"SimpleItemStack"}},"type":"function"},"get_contents":{"name":"get_contents() → dictionary string → uint","doc":"Get counts of all items on this line.  Return value The counts, indexed by item names.See alsoLuaInventory::get_contents","returns":"dictionary string → uint","args":{},"type":"function"},"operator #":{"name":"operator #","doc":"Get the number of items on this transport line.","type":"uint","mode":"[Read-only]"},"owner":{"name":"owner","doc":"The entity this transport line belongs to.","type":"LuaEntity","mode":"[Read-only]"},"operator []":{"name":"operator []","doc":"The indexing operator.","type":"LuaItemStack","mode":"[Read-only]"}}},"LuaTrain":{"name":"LuaTrain","type":"LuaTrain","doc":"A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.","properties":{"get_item_count":{"name":"get_item_count(item) → uint","doc":"Get the amount of a particular item stored in the train.  Parametersitem :: string  (optional):  Item name to count. If not given, counts all items.","returns":"uint","args":{"item":{"doc":"item :: string  (optional):  Item name to count. If not given, counts all items.","name":"item","type":"string"}},"type":"function"},"get_contents":{"name":"get_contents() → dictionary string → uint","doc":"Get a summary of the train's inventory. Return value The counts, indexed by item names.","returns":"dictionary string → uint","args":{},"type":"function"},"remove_item":{"name":"remove_item(stack) → uint","doc":"Remove some items from the train.  Parametersstack :: SimpleItemStack:  The amount and type of items to removeReturn value Number of items actually removed.","returns":"uint","args":{"stack":{"doc":"stack :: SimpleItemStack:  The amount and type of items to remove","name":"stack","type":"SimpleItemStack"}},"type":"function"},"insert":{"name":"insert(stack)","doc":"Insert a stack into the train. Parametersstack :: SimpleItemStack","args":{"stack":{"doc":"stack :: SimpleItemStack","name":"stack","type":"SimpleItemStack"}},"type":"function"},"clear_items_inside":{"name":"clear_items_inside()","doc":"Clear all items in this train.","args":{},"type":"function"},"recalculate_path":{"name":"recalculate_path(force) → boolean","doc":"Checks if the path is invalid and tries to re-path if it isn't.","returns":"boolean","args":{"force":{"doc":"force :: boolean  (optional):  Forces the train to re-path regardless of the current path being valid or not.","name":"force","type":"boolean"}},"type":"function"},"manual_mode":{"name":"manual_mode","doc":"When true, the train is explicitly controlled by the player or script. When false, the","type":"boolean","mode":"[Read-Write]"},"speed":{"name":"speed","doc":"Current speed.","type":"double","mode":"[Read-Write]"},"carriages":{"name":"carriages","doc":"Rolling stocks the train is composed of.","type":"array of LuaEntity","mode":"[Read-only]"},"locomotives":{"name":"locomotives","doc":"Arrays of locomotives. The result is two arrays, indexed by \"front_movers\" and \"back_movers\"","type":"dictionary string → array of LuaEntity","mode":"[Read-only]"},"cargo_wagons":{"name":"cargo_wagons","doc":"The cargo carriages the train contains.","type":"array of LuaEntity","mode":"[Read-only]"},"schedule":{"name":"schedule","doc":"Note:  The schedule can't be changed by modifying the returned table. Instead, changes must","type":"TrainSchedule","mode":"[Read-Write]"},"state":{"name":"state","doc":"This train's current state.","type":"defines.train_state","mode":"[Read-only]"},"front_rail":{"name":"front_rail","doc":"The rail at the front end of the train, possibly nil.","type":"LuaEntity","mode":"[Read-only]"},"back_rail":{"name":"back_rail","doc":"The rail at the back end of the train, possibly nil.","type":"LuaEntity","mode":"[Read-only]"},"rail_direction_from_front_rail":{"name":"rail_direction_from_front_rail","doc":"","type":"defines.rail_direction","mode":"[Read-only]"},"rail_direction_from_back_rail":{"name":"rail_direction_from_back_rail","doc":"","type":"defines.rail_direction","mode":"[Read-only]"},"front_stock":{"name":"front_stock","doc":"The front stock of this train or nil.","type":"LuaEntity","mode":"[Read-only]"},"back_stock":{"name":"back_stock","doc":"The back stock of this train or nil.","type":"LuaEntity","mode":"[Read-only]"},"station":{"name":"station","doc":"The train stop this train is stopped at or nil.","type":"LuaEntity","mode":"[Read-only]"},"has_path":{"name":"has_path","doc":"If this train has a path.","type":"boolean","mode":"[Read-only]"},"path_end_rail":{"name":"path_end_rail","doc":"The destination rail this train is currently pathing to or nil.","type":"LuaEntity","mode":"[Read-only]"},"path_end_stop":{"name":"path_end_stop","doc":"The destination train stop this train is currently pathing to or nil.","type":"LuaEntity","mode":"[Read-only]"}}},"LuaTilePrototype":{"name":"LuaTilePrototype","type":"LuaTilePrototype","doc":"Prototype of a tile.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"collision_mask":{"name":"collision_mask","doc":"The collison mask this tile uses","type":"dictionary string → boolean","mode":"[Read-only]"},"layer":{"name":"layer","doc":"","type":"uint","mode":"[Read-only]"},"walking_speed_modifier":{"name":"walking_speed_modifier","doc":"","type":"float","mode":"[Read-only]"},"vehicle_friction_modifier":{"name":"vehicle_friction_modifier","doc":"","type":"float","mode":"[Read-only]"},"map_color":{"name":"map_color","doc":"","type":"Color","mode":"[Read-only]"},"decorative_removal_probability":{"name":"decorative_removal_probability","doc":"The probability that decorative entities will be removed from on top of this tile when this tile is generated.","type":"float","mode":"[Read-only]"},"allowed_neighbors":{"name":"allowed_neighbors","doc":"","type":"dictionary string → LuaTilePrototype","mode":"[Read-only]"},"mineable_properties":{"name":"mineable_properties","doc":"Table with the following fields: minable :: boolean:  Is this tile mineable at all?hardness :: double:  Mining hardness.miningtime :: double:  Energy required to mine a tile.miningparticle :: string  (optional):  Prototype name of the particle produced when mining this tile.","mode":"[Read-only]","type":"mineable_properties"},"items_to_place_this":{"name":"items_to_place_this","doc":"Items that when placed will produce this tile. It is a dictionary indexed by the item prototype name.","type":"dictionary string → LuaItemPrototype","mode":"[Read-only]"},"can_be_part_of_blueprint":{"name":"can_be_part_of_blueprint","doc":"False if this tile is not allowed in blueprints regardless of the ability to build it.","type":"boolean","mode":"[Read-only]"},"emissions_per_tick":{"name":"emissions_per_tick","doc":"Amount of pollution emissions per tick this tile will absorb.","type":"double","mode":"[Read-only]"},"autoplace_specification":{"name":"autoplace_specification","doc":"Autoplace specification for this prototype. nil if none.","type":"AutoplaceSpecification","mode":"[Read-only]"}}},"LuaTile":{"name":"LuaTile","type":"LuaTile","doc":"A single \"square\" on the map.","properties":{"collides_with":{"name":"collides_with(layer)","doc":"What type of things can collide with this tile?","args":{"layer":{"doc":"layer :: string:  Possible values:  \"ground-tile\" \"water-tile\" \"resource-layer\" \"floor-layer\" \"object-layer\" \"player-layer\" \"train-layer\" \"layer-11\" \"layer-12\" \"layer-13\" \"layer-14\" \"layer-15\"","name":"layer","type":"string"}},"type":"function"},"name":{"name":"name","doc":"Prototype name of this tile. E.g. \"sand-dark\" or \"grass-dry\".","type":"string","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"","type":"LuaTilePrototype","mode":"[Read-only]"},"position":{"name":"position","doc":"The position this tile references.","type":"Position","mode":"[Read-only]"},"hidden_tile":{"name":"hidden_tile","doc":"","type":"string","mode":"[Read-only]"}}},"LuaTechnologyPrototype":{"name":"LuaTechnologyPrototype","type":"LuaTechnologyPrototype","doc":"A Technology prototype.","properties":{"name":{"name":"name","doc":"Name of this technology.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"Localised name of this technology.","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"enabled":{"name":"enabled","doc":"If this technology prototype is enabled by default (enabled at the begining of a game).","type":"boolean","mode":"[Read-only]"},"upgrade":{"name":"upgrade","doc":"If the is technology prototype is an upgrade to some other technology.","type":"boolean","mode":"[Read-only]"},"prerequisites":{"name":"prerequisites","doc":"Prerequisites of this technology. The result maps technology name to the LuaTechnologyPrototype object.","type":"dictionary string → LuaTechnologyPrototype","mode":"[Read-only]"},"research_unit_ingredients":{"name":"research_unit_ingredients","doc":"Ingredients labs will require to research this technology.","type":"array of Ingredient","mode":"[Read-only]"},"effects":{"name":"effects","doc":"Effects applied when this technology is researched.","type":"array of Modifier","mode":"[Read-only]"},"research_unit_count":{"name":"research_unit_count","doc":"Number of research units required for this technology.","type":"uint","mode":"[Read-only]"},"research_unit_energy":{"name":"research_unit_energy","doc":"Amount of energy required to finish a unit of research.","type":"double","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string for this prototype.","type":"string","mode":"[Read-only]"},"level":{"name":"level","doc":"The level of this research.","type":"uint","mode":"[Read-only]"},"research_unit_count_formula":{"name":"research_unit_count_formula","doc":"The count forumula used for this infinite research or nil if this isn't an infinite research.","type":"string","mode":"[Read-only]"}}},"LuaTechnology":{"name":"LuaTechnology","type":"LuaTechnology","doc":"One research item.","properties":{"reload":{"name":"reload()","doc":"Reload this technology from its prototype.","args":{},"type":"function"},"force":{"name":"force","doc":"The force this technology blongs to.","type":"LuaForce","mode":"[Read-only]"},"name":{"name":"name","doc":"Name of this technology.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"Localised name of this technology.","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"The prototype of this technology.","type":"LuaTechnologyPrototype","mode":"[Read-only]"},"enabled":{"name":"enabled","doc":"Can this technology be researched?","type":"boolean","mode":"[Read-Write]"},"upgrade":{"name":"upgrade","doc":"Is this an upgrade-type research?","type":"boolean","mode":"[Read-only]"},"researched":{"name":"researched","doc":"Has this technology been researched? Switching from false to true will trigger the technology","type":"boolean","mode":"[Read-Write]"},"prerequisites":{"name":"prerequisites","doc":"Prerequisites of this technology. The result maps technology name to the LuaTechnology","type":"dictionary string → LuaTechnology","mode":"[Read-only]"},"research_unit_ingredients":{"name":"research_unit_ingredients","doc":"Ingredients labs will require to research this technology.","type":"array of Ingredient","mode":"[Read-only]"},"effects":{"name":"effects","doc":"Effects applied when this technology is researched.","type":"array of Modifier","mode":"[Read-only]"},"research_unit_count":{"name":"research_unit_count","doc":"Number of research units required for this technology.","type":"uint","mode":"[Read-only]"},"research_unit_energy":{"name":"research_unit_energy","doc":"Amount of energy required to finish a unit of research.","type":"double","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string for this prototype.","type":"string","mode":"[Read-only]"},"level":{"name":"level","doc":"The current level of this technology.","type":"uint","mode":"[Read-only]"},"research_unit_count_formula":{"name":"research_unit_count_formula","doc":"The count forumula used for this infinite research or nil if this isn't an infinite research.","type":"string","mode":"[Read-only]"}}},"LuaSurface":{"name":"LuaSurface","type":"LuaSurface","doc":"A \"domain\" of the world. Surfaces can only be created through the API and can not be\n deleted. However, it is planned to allow deletion of a surface in the future. Surfaces\n are uniquely identified by their name. Every game contains at least the surface \"nauvis\".","properties":{"get_pollution":{"name":"get_pollution(position) → double","doc":"Get the pollution for a given position.","returns":"double","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"}},"type":"function"},"can_place_entity":{"name":"can_place_entity{name=…, position=…, direction=…, force=…} → boolean","doc":"Check for collisions with terrain or other entities.","returns":"boolean","args":{"name":{"doc":"Table with the following fields: name :: string:  Name of the entity to checkposition :: Position:  Where the entity would be placeddirection :: defines.direction  (optional):  Direction the entity would be placedforce :: string or LuaForce  (optional):  The force that would place the entity.\n     If not specified, the enemy force is assumed.","name":"name","type":"string"},"name=…":{"name":"name=…","type":"name=…"},"position=…":{"name":"position=…","type":"position=…"},"direction=…":{"name":"direction=…","type":"direction=…"},"force=…":{"name":"force=…","type":"force=…"}},"type":"function"},"find_entity":{"name":"find_entity(entity, position) → LuaEntity","doc":"Find a specific entity at a specific position.","returns":"LuaEntity","args":{"entity":{"doc":"entity :: string:  Entity to look for","name":"entity","type":"string"},"position":{"doc":"position :: Position:  Coordinates to look at","name":"position","type":"Position"}},"type":"function"},"find_entities":{"name":"find_entities(area) → array of LuaEntity","doc":"Find entities in a given area.","returns":"array of LuaEntity","args":{"area":{"doc":"area :: BoundingBox  (optional):  Where to search. If not given all entities on the surface are returned.","name":"area","type":"BoundingBox"}},"type":"function"},"find_entities_filtered":{"name":"find_entities_filtered{area=…, position=…, name=…, type=…, force=…, limit=…} → array of LuaEntity","doc":"Find entities of given type or name in a given area. If no filters (name, type, or force) are given, returns all entities in the search area.","returns":"array of LuaEntity","args":{"area":{"doc":"Table with the following fields: area :: BoundingBox  (optional):  Search area if not defined and position is not defined the entire surface is searchedposition :: Position  (optional):  Search position if not defined and area is not defined the entire surface is searchedname :: string  (optional)type :: string  (optional)force :: string or LuaForce  (optional)limit :: uint  (optional)","name":"area","type":"BoundingBox"},"area=…":{"name":"area=…","type":"area=…"},"position=…":{"name":"position=…","type":"position=…"},"name=…":{"name":"name=…","type":"name=…"},"type=…":{"name":"type=…","type":"type=…"},"force=…":{"name":"force=…","type":"force=…"},"limit=…":{"name":"limit=…","type":"limit=…"}},"type":"function"},"count_entities_filtered":{"name":"count_entities_filtered{area=…, position=…, name=…, type=…, force=…, limit=…} → uint","doc":"Count entities of given type or name in a given area. Works just like","returns":"uint","args":{"area":{"doc":"Table with the following fields: area :: BoundingBox  (optional):  Search area if not defined and position is not defined the entire surface is searchedposition :: Position  (optional):  Search position if not defined and area is not defined the entire surface is searchedname :: string  (optional)type :: string  (optional)force :: string or LuaForce  (optional)limit :: uint  (optional)","name":"area","type":"BoundingBox"},"area=…":{"name":"area=…","type":"area=…"},"position=…":{"name":"position=…","type":"position=…"},"name=…":{"name":"name=…","type":"name=…"},"type=…":{"name":"type=…","type":"type=…"},"force=…":{"name":"force=…","type":"force=…"},"limit=…":{"name":"limit=…","type":"limit=…"}},"type":"function"},"find_non_colliding_position":{"name":"find_non_colliding_position(name, center, radius, precision) → Position","doc":"Find a non-colliding possition within a given rectangle.","returns":"Position","args":{"name":{"doc":"name :: string:  Prototype name of the entity to find a position for. (The bounding\n   box for the collision checking is taken from this prototype.)","name":"name","type":"string"},"center":{"doc":"center :: Position:  Center of the search area.","name":"center","type":"Position"},"radius":{"doc":"radius :: double:  Max distance from center to search in. 0 for infinitely-large\n   search area.","name":"radius","type":"double"},"precision":{"doc":"precision :: double:  The step length from the given position as it searches, in tiles.","name":"precision","type":"double"}},"type":"function"},"spill_item_stack":{"name":"spill_item_stack(position, items, enable_looted)","doc":"Spill items on the ground centered at a given location.   Parametersposition :: Position:  Center of the spillageitems :: LuaItemStack or SimpleItemStack:  Items to spillenable_looted :: boolean  (optional):  When true, each created item will be flagged with the LuaEntity::to_be_looted flag.","args":{"position":{"doc":"position :: Position:  Center of the spillage","name":"position","type":"Position"},"items":{"doc":"items :: LuaItemStack or SimpleItemStack:  Items to spill","name":"items","type":"LuaItemStack or SimpleItemStack"},"enable_looted":{"doc":"enable_looted :: boolean  (optional):  When true, each created item will be flagged with the LuaEntity::to_be_looted flag.","name":"enable_looted","type":"boolean"}},"type":"function"},"find_enemy_units":{"name":"find_enemy_units(center, radius, force) → array of LuaEntity","doc":"Find units enemy of a given force within an area.","returns":"array of LuaEntity","args":{"center":{"doc":"center :: Position:  Center of the search area","name":"center","type":"Position"},"radius":{"doc":"radius :: double:  Radius of the circular search area","name":"radius","type":"double"},"force":{"doc":"force :: LuaForce or string  (optional):  Force to find enemies of. If not given,\n   uses the player force.","name":"force","type":"LuaForce or string"}},"type":"function"},"find_nearest_enemy":{"name":"find_nearest_enemy{position=…, max_distance=…, force=…} → LuaEntity","doc":"Find the enemy closest to the given position.","returns":"LuaEntity","args":{"position":{"doc":"Table with the following fields: position :: Position:  Center of the search area.max_distance :: double:  Radius of the circular search area.force :: string or LuaForce  (optional):  The force the result will be an enemy of.\n     Uses the player force if not specified.","name":"position","type":"Position"},"position=…":{"name":"position=…","type":"position=…"},"max_distance=…":{"name":"max_distance=…","type":"max_distance=…"},"force=…":{"name":"force=…","type":"force=…"}},"type":"function"},"set_multi_command":{"name":"set_multi_command{command=…, unit_count=…, force=…, unit_search_distance=…} → uint","doc":"Give a command to multiple units. This will automatically select suitable units for the","returns":"uint","args":{"command":{"doc":"Table with the following fields: command :: Commandunit_count :: uint:  Number of units to give the command to.force :: string or LuaForce  (optional):  Force of the units this command is to be given to.\n     If not specified, uses the enemy force.unit_search_distance :: uint  (optional):  Radius to search for units. The search area is centered on\n     the destination of the command.","name":"command","type":"Command"},"command=…":{"name":"command=…","type":"command=…"},"unit_count=…":{"name":"unit_count=…","type":"unit_count=…"},"force=…":{"name":"force=…","type":"force=…"},"unit_search_distance=…":{"name":"unit_search_distance=…","type":"unit_search_distance=…"}},"type":"function"},"create_entity":{"name":"create_entity{name=…, position=…, direction=…, force=…, target=…, source=…, fast_replace=…, player=…, spill=…} → LuaEntity","doc":"Create an entity on this surface.","returns":"LuaEntity","args":{"name":{"doc":"Table with the following fields: name :: string:  The entity prototype name to create.position :: Position:  Where to create the entity.direction :: defines.direction  (optional):  Desired orientation of the entity after creation.force :: string or LuaForce  (optional):  Force of the entity, default is enemy.target :: LuaEntity  (optional):  Entity with health for the new entity to target.source :: LuaEntity  (optional):  Source entity. Used for beams.fast_replace :: boolean  (optional):  If true, building will attempt to simulate fast-replace building.player :: PlayerSpecification  (optional):  If given along with fast_replace being true, fast-replace will simulate using this player.spill :: boolean  (optional):  If false while fast_replace is true any excess items from fast-replacing will be deleted instead of dropped on the ground.Additional entity-specific parametersassembling-machinerecipe :: string  (optional)containerbar :: uint  (optional):  Inventory index where the red limiting bar should be set.flying-texttext :: string:  The string to show.color :: Color:  Color of the displayed text.entity-ghostinner_name :: string:  The prototype name of the entity contained in the ghost.expires :: boolean  (optional):  If false the ghost entity will not expire. Default is true.fireinitial_ground_flame_count :: uint:  With how many small flames should the fire on ground be created.inserterconditions:  Table with the following fields: circuit :: CircuitCondition  (optional)logistics :: CircuitCondition  (optional)filters :: array of Filteritem-entitystack :: SimpleItemStack:  The stack of items to create. This must be a table, i.e. a single string\n                                      is not allowed here.item-request-proxymodules :: array of SimpleItemStack:  The stacks of items to be delivered to target entity from logistic\n                                                network. Each stack must be table. If empty, the item request proxy won't be created.logistic-containerrequest_filters :: array of Filter  (optional)particlemovement :: Vectorheight :: floatvertical_speed :: floatframe_speed :: floatprojectilespeed :: doubleresourceamount :: uintunderground-belttype :: string  (optional):  \"output\" or \"input\"; default is \"input\".programmable-speakerparameters :: ProgrammableSpeakerParameters  (optional)alert_parameters :: ProgrammableSpeakerAlertParameters  (optional)character-corpseinventory_size :: uint  (optional)player_index :: uint  (optional)","name":"name","type":"string"},"name=…":{"name":"name=…","type":"name=…"},"position=…":{"name":"position=…","type":"position=…"},"direction=…":{"name":"direction=…","type":"direction=…"},"force=…":{"name":"force=…","type":"force=…"},"target=…":{"name":"target=…","type":"target=…"},"source=…":{"name":"source=…","type":"source=…"},"fast_replace=…":{"name":"fast_replace=…","type":"fast_replace=…"},"player=…":{"name":"player=…","type":"player=…"},"spill=…":{"name":"spill=…","type":"spill=…"}},"type":"function"},"create_unit_group":{"name":"create_unit_group{position=…, force=…} → LuaUnitGroup","doc":"Create a new unit group at a given position.","returns":"LuaUnitGroup","args":{"position":{"doc":"Table with the following fields: position :: Position:  Initial position of the new unit group.force :: string or LuaForce  (optional):  Force of the new unit group. Defaults to \"enemy\".","name":"position","type":"Position"},"position=…":{"name":"position=…","type":"position=…"},"force=…":{"name":"force=…","type":"force=…"}},"type":"function"},"build_enemy_base":{"name":"build_enemy_base(position, unit_count, force)","doc":"Send a group to build a new base.","args":{"position":{"doc":"position :: Position:  Location of the new base.","name":"position","type":"Position"},"unit_count":{"doc":"unit_count :: uint:  Number of biters to send for the base-building task.","name":"unit_count","type":"uint"},"force":{"doc":"force :: string or LuaForce  (optional):  Force the new base will belong to. Defaults to enemy.","name":"force","type":"string or LuaForce"}},"type":"function"},"get_tile":{"name":"get_tile(x, y) → LuaTile","doc":"Get the tile at a given position.    Parametersx :: inty :: intNote:  The input position params can also be a single tile position.","returns":"LuaTile","args":{"x":{"doc":"x :: int","name":"x","type":"int"},"y":{"doc":"y :: int","name":"y","type":"int"}},"type":"function"},"set_tiles":{"name":"set_tiles(tiles, correct_tiles)","doc":"Set tiles at specified locations. Automatically corrects the edges around modified tiles.   Parameterstiles :: array of Tile:  Each Tile is a table: name :: stringposition :: Positioncorrect_tiles :: boolean  (optional):  If false, the correction logic is not done on the changed tiles.","args":{"tiles":{"doc":"tiles :: array of Tile:  Each Tile is a table: name :: stringposition :: Position","name":"tiles","type":"array of Tile"},"correct_tiles":{"doc":"correct_tiles :: boolean  (optional):  If false, the correction logic is not done on the changed tiles.\n                                           Defaults to true.","name":"correct_tiles","type":"boolean"}},"type":"function"},"pollute":{"name":"pollute(source, amount)","doc":"Spawn pollution at the given position.  Parameterssource :: Position:  Where to spawn the pollution.amount :: double:  How much pollution to add.","args":{"source":{"doc":"source :: Position:  Where to spawn the pollution.","name":"source","type":"Position"},"amount":{"doc":"amount :: double:  How much pollution to add.","name":"amount","type":"double"}},"type":"function"},"get_chunks":{"name":"get_chunks() → LuaChunkIterator","doc":"Get an iterator going over every chunk on this surface.","returns":"LuaChunkIterator","args":{},"type":"function"},"is_chunk_generated":{"name":"is_chunk_generated(position) → boolean","doc":"Is a given chunk generated?  Parametersposition :: ChunkPosition:  The chunk's position.","returns":"boolean","args":{"position":{"doc":"position :: ChunkPosition:  The chunk's position.","name":"position","type":"ChunkPosition"}},"type":"function"},"request_to_generate_chunks":{"name":"request_to_generate_chunks(position, radius)","doc":"Request that the game's map generator generate chunks at the given position","args":{"position":{"doc":"position :: Position:  Where to generate the new chunks.","name":"position","type":"Position"},"radius":{"doc":"radius :: uint:  Radius from position to generate new chunks in.","name":"radius","type":"uint"}},"type":"function"},"set_chunk_generated_status":{"name":"set_chunk_generated_status(position, status)","doc":"Set generated status of a chunk. Useful when copying chunks.  Parametersposition :: Position:  The chunk's position.status :: defines.chunk_generated_status:  The chunk's new status.","args":{"position":{"doc":"position :: Position:  The chunk's position.","name":"position","type":"Position"},"status":{"doc":"status :: defines.chunk_generated_status:  The chunk's new status.","name":"status","type":"defines.chunk_generated_status"}},"type":"function"},"find_logistic_network_by_position":{"name":"find_logistic_network_by_position(position, force) → LuaLogisticNetwork","doc":"Find the logistic network that covers a given position.   Parametersposition :: Positionforce :: string or LuaForce:  Force the logistic network should belong to.Return value The found network or nil if no such network was found.","returns":"LuaLogisticNetwork","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"},"force":{"doc":"force :: string or LuaForce:  Force the logistic network should belong to.","name":"force","type":"string or LuaForce"}},"type":"function"},"find_logistic_networks_by_construction_area":{"name":"find_logistic_networks_by_construction_area(position, force) → array of LuaLogisticNetwork","doc":"Finds all of the logistics networks whos construction area intersects with the given position.   Parametersposition :: Positionforce :: string or LuaForce:  Force the logistic networks should belong to.","returns":"array of LuaLogisticNetwork","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"},"force":{"doc":"force :: string or LuaForce:  Force the logistic networks should belong to.","name":"force","type":"string or LuaForce"}},"type":"function"},"freeze_daytime":{"name":"freeze_daytime(freeze)","doc":"Freeze or unfreeze time of day at the current value.","args":{"freeze":{"doc":"freeze :: boolean","name":"freeze","type":"boolean"}},"type":"function"},"deconstruct_area":{"name":"deconstruct_area{area=…, force=…}","doc":"Place a deconstruction request.","args":{"area":{"doc":"Table with the following fields: area :: BoundingBox:  The area to mark for deconstructionforce :: string or LuaForce:  The force whose bots should perform the deconstruction.","name":"area","type":"BoundingBox"},"area=…":{"name":"area=…","type":"area=…"},"force=…":{"name":"force=…","type":"force=…"}},"type":"function"},"cancel_deconstruct_area":{"name":"cancel_deconstruct_area{area=…, force=…}","doc":"Cancel a deconstruction order.","args":{"area":{"doc":"Table with the following fields: area :: BoundingBox:  The are to cancel deconstruction orders in.force :: string or LuaForce:  The force whose deconstruction orders to cancel.","name":"area","type":"BoundingBox"},"area=…":{"name":"area=…","type":"area=…"},"force=…":{"name":"force=…","type":"force=…"}},"type":"function"},"get_hidden_tile":{"name":"get_hidden_tile(position)","doc":"The hidden tile name or nil if there isn't one for the given position.","args":{"position":{"doc":"position :: Position:  The tile position.","name":"position","type":"Position"}},"type":"function"},"get_connected_tiles":{"name":"get_connected_tiles(position, tiles) → array of Position","doc":"Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.","returns":"array of Position","args":{"position":{"doc":"position :: Position:  The tile position to start at.","name":"position","type":"Position"},"tiles":{"doc":"tiles :: array of string:  The tiles to search for.","name":"tiles","type":"array of string"}},"type":"function"},"delete_chunk":{"name":"delete_chunk(position)","doc":"Parametersposition :: Position:  The chunk position to deleteNote:  This won't delete the chunk immediately. Chunks are deleted at the end of the current tick.","args":{"position":{"doc":"position :: Position:  The chunk position to delete","name":"position","type":"Position"}},"type":"function"},"regenerate_entity":{"name":"regenerate_entity(entitites, chunks)","doc":"Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.","args":{"entitites":{"doc":"entitites :: string or array of string: \n   Prototype names of entity or entities to autoplace.","name":"entitites","type":"string or array of string"},"chunks":{"doc":"chunks :: array of Position  (optional): \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.","name":"chunks","type":"array of Position"}},"type":"function"},"regenerate_decorative":{"name":"regenerate_decorative(decoratives, chunks)","doc":"Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.","args":{"decoratives":{"doc":"decoratives :: string or array of string: \n   Prototype names of decorative or decoratives to autoplace.","name":"decoratives","type":"string or array of string"},"chunks":{"doc":"chunks :: array of Position  (optional): \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.","name":"chunks","type":"array of Position"}},"type":"function"},"print":{"name":"print(message)","doc":"Print text to the chat console of all players on this surface. Parametersmessage :: LocalisedString","args":{"message":{"doc":"message :: LocalisedString","name":"message","type":"LocalisedString"}},"type":"function"},"destroy_decoratives":{"name":"destroy_decoratives(area)","doc":"Removes all decoratives from the given area.","args":{"area":{"doc":"area :: BoundingBox","name":"area","type":"BoundingBox"}},"type":"function"},"create_decoratives":{"name":"create_decoratives{check_collision=…, decoratives=…}","doc":"Adds the given decoratives to the surface.","args":{"check_collision":{"doc":"Table with the following fields: check_collision :: boolean  (optional):  If collision should be checked against entities/tiles.decoratives :: array of Decorative","name":"check_collision","type":"boolean"},"check_collision=…":{"name":"check_collision=…","type":"check_collision=…"},"decoratives=…":{"name":"decoratives=…","type":"decoratives=…"}},"type":"function"},"get_trains":{"name":"get_trains(force) → array of LuaTrain","doc":"Parametersforce :: string or LuaForce  (optional):  If given only trains matching this force are returned.","returns":"array of LuaTrain","args":{"force":{"doc":"force :: string or LuaForce  (optional):  If given only trains matching this force are returned.","name":"force","type":"string or LuaForce"}},"type":"function"},"name":{"name":"name","doc":"The name of this surface. Names are unique among surfaces.","type":"string","mode":"[Read-only]"},"index":{"name":"index","doc":"Unique ID associated with this surface.","type":"uint","mode":"[Read-only]"},"map_gen_settings":{"name":"map_gen_settings","doc":"Gets the generation settings for the surface.","type":"MapGenSettings","mode":"[Read-only]"},"always_day":{"name":"always_day","doc":"When set to true, the sun will always shine.","type":"boolean","mode":"[Read-Write]"},"daytime":{"name":"daytime","doc":"Current time of day, as a number in range [0, 1).","type":"float","mode":"[Read-Write]"},"darkness":{"name":"darkness","doc":"Amount of darkness at the current time.","type":"float","mode":"[Read-only]"},"wind_speed":{"name":"wind_speed","doc":"Current wind speed.","type":"float","mode":"[Read-Write]"},"wind_orientation":{"name":"wind_orientation","doc":"Current wind direction.","type":"float","mode":"[Read-Write]"},"wind_orientation_change":{"name":"wind_orientation_change","doc":"Change in wind orientation per tick.","type":"float","mode":"[Read-Write]"},"peaceful_mode":{"name":"peaceful_mode","doc":"Is peaceful mode enabled on this surface?","type":"boolean","mode":"[Read-Write]"}}},"LuaStyle":{"name":"LuaStyle","type":"LuaStyle","doc":"Style of a GUI element. All of the attributes listed here may be nil if not available for a\n particular GUI element.","properties":{"gui":{"name":"gui","doc":"Gui of the LuaGuiElement of this style.","type":"LuaGui","mode":"[Read-only]"},"name":{"name":"name","doc":"Name of this style.","type":"string","mode":"[Read-only]"},"minimal_width":{"name":"minimal_width","doc":"","type":"int","mode":"[Read-Write]"},"maximal_width":{"name":"maximal_width","doc":"","type":"int","mode":"[Read-Write]"},"minimal_height":{"name":"minimal_height","doc":"","type":"int","mode":"[Read-Write]"},"maximal_height":{"name":"maximal_height","doc":"","type":"int","mode":"[Read-Write]"},"top_padding":{"name":"top_padding","doc":"","type":"int","mode":"[Read-Write]"},"right_padding":{"name":"right_padding","doc":"","type":"int","mode":"[Read-Write]"},"bottom_padding":{"name":"bottom_padding","doc":"","type":"int","mode":"[Read-Write]"},"left_padding":{"name":"left_padding","doc":"","type":"int","mode":"[Read-Write]"},"font_color":{"name":"font_color","doc":"","type":"Color","mode":"[Read-Write]"},"font":{"name":"font","doc":"","type":"string","mode":"[Read-Write]"},"cell_spacing":{"name":"cell_spacing","doc":"Space between the table cell contents and border.","type":"int","mode":"[Read-Write]"},"visible":{"name":"visible","doc":"When not visible the GUI element is hidden completely and takes no space in the layout.","type":"boolean","mode":"[Read-Write]"},"hovered_font_color":{"name":"hovered_font_color","doc":"Can only be used if this is LuaButtonStyle","type":"Color","mode":"[Read-Write]"},"clicked_font_color":{"name":"clicked_font_color","doc":"Can only be used if this is LuaButtonStyle","type":"Color","mode":"[Read-Write]"},"disabled_font_color":{"name":"disabled_font_color","doc":"Can only be used if this is LuaButtonStyle","type":"Color","mode":"[Read-Write]"},"pie_progress_color":{"name":"pie_progress_color","doc":"Can only be used if this is LuaButtonStyle","type":"Color","mode":"[Read-Write]"},"max_on_row":{"name":"max_on_row","doc":"Can only be used if this is LuaFlowStyle","type":"int","mode":"[Read-Write]"},"resize_row_to_width":{"name":"resize_row_to_width","doc":"","type":"boolean","mode":"[Read-Write]"},"resize_to_row_height":{"name":"resize_to_row_height","doc":"","type":"boolean","mode":"[Read-Write]"},"horizontal_spacing":{"name":"horizontal_spacing","doc":"Horizontal space between individual cells.","type":"int","mode":"[Read-Write]"},"vertical_spacing":{"name":"vertical_spacing","doc":"Vertical space between individual cells.","type":"int","mode":"[Read-Write]"},"title_top_padding":{"name":"title_top_padding","doc":"Can only be used if this is LuaFrameStyle","type":"uint","mode":"[Read-Write]"},"title_right_padding":{"name":"title_right_padding","doc":"Can only be used if this is LuaFrameStyle","type":"uint","mode":"[Read-Write]"},"title_bottom_padding":{"name":"title_bottom_padding","doc":"Can only be used if this is LuaFrameStyle","type":"uint","mode":"[Read-Write]"},"title_left_padding":{"name":"title_left_padding","doc":"Can only be used if this is LuaFrameStyle","type":"uint","mode":"[Read-Write]"},"selection_background_color":{"name":"selection_background_color","doc":"The background color when selecting text.","type":"Color","mode":"[Read-Write]"},"smooth_size":{"name":"smooth_size","doc":"Can only be used if this is LuaProgressBarStyle","type":"uint","mode":"[Read-Write]"},"smooth_color":{"name":"smooth_color","doc":"Can only be used if this is LuaProgressBarStyle","type":"Color","mode":"[Read-Write]"},"diode_count":{"name":"diode_count","doc":"Can only be used if this is LuaProgressBarStyle","type":"uint","mode":"[Read-Write]"},"column_alignments":{"name":"column_alignments","doc":"Alignments of columns of the table","type":"custom array of Alignment","mode":"[Read-only]"},"horizontal_scrollbar_spacing":{"name":"horizontal_scrollbar_spacing","doc":"Can only be used if this is LuaScrollPaneStyle","type":"int","mode":"[Read-Write]"},"vertical_scrollbar_spacing":{"name":"vertical_scrollbar_spacing","doc":"Can only be used if this is LuaScrollPaneStyle","type":"int","mode":"[Read-Write]"}}},"LuaSettings":{"name":"LuaSettings","type":"LuaSettings","properties":{"get_player_settings":{"name":"get_player_settings(LuaPlayer)","doc":"ParametersNote:","args":{"LuaPlayer":{"name":"LuaPlayer","type":"LuaPlayer"}},"type":"function"},"startup":{"name":"startup","doc":"","type":"custom dictionary string → ModSetting","mode":"[Read-only]"},"global":{"name":"global","doc":"","type":"custom dictionary string → ModSetting","mode":"[Read-only]"},"player":{"name":"player","doc":"","type":"custom dictionary string → ModSetting","mode":"[Read-only]"}}},"LuaRemote":{"name":"LuaRemote","type":"LuaRemote","doc":"Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A\n script or mod can then register an interface with LuaRemote, after that any script can call the\n registered functions, provided it knows the interface name and the desired function name. An instance of\n LuaRemote is available through the global object named remote.","properties":{"add_interface":{"name":"add_interface(name, functions)","doc":"Add a remote interface.","args":{"name":{"doc":"name :: string:  Name of the interface.","name":"name","type":"string"},"functions":{"doc":"functions :: dictionary string → function:  List of functions that are members of the new interface.","name":"functions","type":"dictionary string → function"}},"type":"function"},"remove_interface":{"name":"remove_interface(name) → boolean","doc":"Removes an interface with the given name.","returns":"boolean","args":{"name":{"doc":"name :: string:  Name of the interface.","name":"name","type":"string"}},"type":"function"},"call":{"name":"call(interface, function, ...)","doc":"Call a function of an interface.   Parametersinterface :: string:  Interface to look up function in.function :: string:  Function name that belongs to interface....:  Arguments to pass to the called function.","args":{"interface":{"doc":"interface :: string:  Interface to look up function in.","name":"interface","type":"string"},"function":{"doc":"function :: string:  Function name that belongs to interface.","name":"function","type":"string"},"...":{"doc":"...:  Arguments to pass to the called function.","name":"..."}},"type":"function"},"interfaces":{"name":"interfaces","doc":"List of all registered interfaces. For each interface name, remote.interfaces[name] is a dictionary","type":"dictionary string → dictionary string → boolean","mode":"[Read-only]"}}},"LuaRecipePrototype":{"name":"LuaRecipePrototype","type":"LuaRecipePrototype","doc":"A crafting recipe prototype.","properties":{"enabled":{"name":"enabled","doc":"If this recipe prototype is enabled by default (enabled at the begining of a game).","type":"boolean","mode":"[Read-only]"},"name":{"name":"name","doc":"Name of the recipe. This can be different than the name of the result items as there could","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"Localised name of the recipe.","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"category":{"name":"category","doc":"Category of the recipe.","type":"string","mode":"[Read-only]"},"ingredients":{"name":"ingredients","doc":"Ingredients for this recipe.","type":"array of Ingredient","mode":"[Read-only]"},"products":{"name":"products","doc":"The results of this recipe.","type":"array of Product","mode":"[Read-only]"},"hidden":{"name":"hidden","doc":"Is the recipe hidden? Hidden recipe don't show up in the crafting menu.","type":"boolean","mode":"[Read-only]"},"energy":{"name":"energy","doc":"Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy","type":"double","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string. This is used to sort the crafting menu.","type":"string","mode":"[Read-only]"},"group":{"name":"group","doc":"Group of this recipe.","type":"LuaGroup","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"Subgroup of this recipe.","type":"LuaGroup","mode":"[Read-only]"},"request_paste_multiplier":{"name":"request_paste_multiplier","doc":"The multiplier used when this recipe is copied from an assembling machine to a requester chest.","type":"uint","mode":"[Read-only]"},"overload_multiplier":{"name":"overload_multiplier","doc":"Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".","type":"uint","mode":"[Read-only]"}}},"LuaRecipe":{"name":"LuaRecipe","type":"LuaRecipe","doc":"A crafting recipe. Recipes belong to forces (see LuaForce) because some recipes\n are unlocked by research, and researches are per-force.","properties":{"reload":{"name":"reload()","doc":"Reload the recipe from the prototype.","args":{},"type":"function"},"name":{"name":"name","doc":"Name of the recipe. This can be different than the name of the result items as there could","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"Localised name of the recipe.","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"The prototype for this recipe.","type":"LuaRecipePrototype","mode":"[Read-only]"},"enabled":{"name":"enabled","doc":"Can the recipe be used?","type":"boolean","mode":"[Read-Write]"},"category":{"name":"category","doc":"Category of the recipe.","type":"string","mode":"[Read-only]"},"ingredients":{"name":"ingredients","doc":"Ingredients for this recipe.","type":"array of Ingredient","mode":"[Read-only]"},"products":{"name":"products","doc":"The results of this recipe.","type":"array of Product","mode":"[Read-only]"},"hidden":{"name":"hidden","doc":"Is the recipe hidden? Hidden recipe don't show up in the crafting menu.","type":"boolean","mode":"[Read-only]"},"energy":{"name":"energy","doc":"Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy","type":"double","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string. This is used to sort the crafting menu.","type":"string","mode":"[Read-only]"},"group":{"name":"group","doc":"Group of this recipe.","type":"LuaGroup","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"Subgroup of this recipe.","type":"LuaGroup","mode":"[Read-only]"},"force":{"name":"force","doc":"The force that owns this recipe.","type":"LuaForce","mode":"[Read-only]"}}},"LuaRandomGenerator":{"name":"LuaRandomGenerator","type":"LuaRandomGenerator","doc":"A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will.\n This random generator can be saved and loaded and will maintain its state.\n Note this is entirely different from calling math.random(...) and you should be sure you actually want to use this over calling math.random(...).","properties":{"operator ()":{"name":"operator ()(lower, upper) → double","doc":"Generates a random number.","returns":"double","args":{"lower":{"doc":"lower :: double  (optional):  Inclusive lower bound on the result","name":"lower","type":"double"},"upper":{"doc":"upper :: double  (optional):  Exclusive upper bound on the result","name":"upper","type":"double"}},"type":"function"},"re_seed":{"name":"re_seed(seed)","doc":"Re-seeds the random generator with the given value.","args":{"seed":{"doc":"seed :: uint","name":"seed","type":"uint"}},"type":"function"}}},"LuaPlayer":{"name":"LuaPlayer","type":"LuaPlayer","doc":"A player in the game. Pay attention that a player may or may not have a character, which is the\n LuaEntity of the little guy running around the world doing things.","properties":{"set_ending_screen_data":{"name":"set_ending_screen_data(message, file)","doc":"Setup the screen to be shown when the game is finished.  Parametersmessage :: LocalisedString:  Message to be shown.file :: string  (optional):  Path to image to be shown.","args":{"message":{"doc":"message :: LocalisedString:  Message to be shown.","name":"message","type":"LocalisedString"},"file":{"doc":"file :: string  (optional):  Path to image to be shown.","name":"file","type":"string"}},"type":"function"},"print":{"name":"print(message)","doc":"Print text to the chat console. Parametersmessage :: LocalisedString","args":{"message":{"doc":"message :: LocalisedString","name":"message","type":"LocalisedString"}},"type":"function"},"clear_console":{"name":"clear_console()","doc":"Clear the chat console.","args":{},"type":"function"},"get_goal_description":{"name":"get_goal_description() → LocalisedString","doc":"Get the current goal description, as a localised string.","returns":"LocalisedString","args":{},"type":"function"},"set_goal_description":{"name":"set_goal_description(text, only_update)","doc":"Set the text in the goal window (top left).  Parameterstext :: LocalisedString  (optional):  The text to display. \\n can be used to delimit lines. Passing empty","args":{"text":{"doc":"text :: LocalisedString  (optional):  The text to display. \\n can be used to delimit lines. Passing empty\n   string or omitting this parameter entirely will make the goal window disappear.","name":"text","type":"LocalisedString"},"only_update":{"doc":"only_update :: boolean  (optional):  When true, won't play the \"goal updated\" sound.","name":"only_update","type":"boolean"}},"type":"function"},"set_controller":{"name":"set_controller{type=…, character=…}","doc":"Set the controller type of the player. Parameters Table with the following fields: type :: defines.controllers:  Which controller to usecharacter :: LuaEntity  (optional):  Entity to control. Mandatory when type is","args":{"type":{"doc":"Table with the following fields: type :: defines.controllers:  Which controller to usecharacter :: LuaEntity  (optional):  Entity to control. Mandatory when type is\n     defines.controllers.character, ignored otherwise.","name":"type","type":"defines.controllers"},"type=…":{"name":"type=…","type":"type=…"},"character=…":{"name":"character=…","type":"character=…"}},"type":"function"},"disable_recipe_groups":{"name":"disable_recipe_groups()","doc":"Disable recipe groups. Note:  There is no way to undo this.","args":{},"type":"function"},"disable_recipe_subgroups":{"name":"disable_recipe_subgroups()","doc":"Disable recipe subgroups. Note:  There is no way to undo this.","args":{},"type":"function"},"print_entity_statistics":{"name":"print_entity_statistics(entities)","doc":"Print entity statistics to the player's console.","args":{"entities":{"doc":"entities :: array of string  (optional):  Entity prototypes to get statistics for. If not specified or empty,\n   display statistics for all entities.","name":"entities","type":"array of string"}},"type":"function"},"unlock_achievement":{"name":"unlock_achievement(name)","doc":"Unlock the achievements of the given player.","args":{"name":{"doc":"name :: string:  name of the achievement to unlock","name":"name","type":"string"}},"type":"function"},"clean_cursor":{"name":"clean_cursor() → boolean","doc":"Invokes the \"clean cursor\" action on the player as if the user pressed it.","returns":"boolean","args":{},"type":"function"},"create_character":{"name":"create_character(character)","doc":"Creates and attaches a character entity to this player.","args":{"character":{"doc":"character :: string  (optional):  The character to create else the default is used.","name":"character","type":"string"}},"type":"function"},"add_alert":{"name":"add_alert(entity, type)","doc":"Adds an alert to this player for the given entity of the given alert type.","args":{"entity":{"doc":"entity :: LuaEntity","name":"entity","type":"LuaEntity"},"type":{"doc":"type :: defines.alert_type","name":"type","type":"defines.alert_type"}},"type":"function"},"add_custom_alert":{"name":"add_custom_alert(entity, icon, message, show_on_map)","doc":"Adds a custom alert to this player.","args":{"entity":{"doc":"entity :: LuaEntity","name":"entity","type":"LuaEntity"},"icon":{"doc":"icon :: SignalID","name":"icon","type":"SignalID"},"message":{"doc":"message :: LocalisedString","name":"message","type":"LocalisedString"},"show_on_map":{"doc":"show_on_map :: boolean","name":"show_on_map","type":"boolean"}},"type":"function"},"remove_alert":{"name":"remove_alert{entity=…, prototype=…, position=…, type=…, surface=…, icon=…, message=…}","doc":"Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.","args":{"entity":{"doc":"Table with the following fields: entity :: LuaEntity  (optional)prototype :: LuaEntityPrototype  (optional)position :: Position  (optional)type :: defines.alert_type  (optional)surface :: SurfaceSpecification  (optional)icon :: SignalID  (optional)message :: LocalisedString  (optional)","name":"entity","type":"LuaEntity"},"entity=…":{"name":"entity=…","type":"entity=…"},"prototype=…":{"name":"prototype=…","type":"prototype=…"},"position=…":{"name":"position=…","type":"position=…"},"type=…":{"name":"type=…","type":"type=…"},"surface=…":{"name":"surface=…","type":"surface=…"},"icon=…":{"name":"icon=…","type":"icon=…"},"message=…":{"name":"message=…","type":"message=…"}},"type":"function"},"get_alerts":{"name":"get_alerts{entity=…, prototype=…, position=…, type=…, surface=…} → dictionary uint → dictionary defines.alert_type → array of alert","doc":"Gets all alerts matching the given filters or if no filters are given all alerts are returned.","returns":"dictionary uint → dictionary defines.alert_type → array of alert","args":{"entity":{"doc":"Table with the following fields: entity :: LuaEntity  (optional)prototype :: LuaEntityPrototype  (optional)position :: Position  (optional)type :: defines.alert_type  (optional)surface :: SurfaceSpecification  (optional)","name":"entity","type":"LuaEntity"},"entity=…":{"name":"entity=…","type":"entity=…"},"prototype=…":{"name":"prototype=…","type":"prototype=…"},"position=…":{"name":"position=…","type":"position=…"},"type=…":{"name":"type=…","type":"type=…"},"surface=…":{"name":"surface=…","type":"surface=…"}},"type":"function"},"mute_alert":{"name":"mute_alert(alert_type) → boolean","doc":"Mutes alerts for the given alert category.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"unmute_alert":{"name":"unmute_alert(alert_type) → boolean","doc":"Unmutes alerts for the given alert category.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"is_alert_muted":{"name":"is_alert_muted(alert_type) → boolean","doc":"If the given alert type is currently muted.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"enable_alert":{"name":"enable_alert(alert_type) → boolean","doc":"Enables alerts for the given alert category.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"disable_alert":{"name":"disable_alert(alert_type) → boolean","doc":"Disables alerts for the given alert category.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"is_alert_enabled":{"name":"is_alert_enabled(alert_type) → boolean","doc":"If the given alert type is currently enabled.","returns":"boolean","args":{"alert_type":{"doc":"alert_type :: defines.alert_type","name":"alert_type","type":"defines.alert_type"}},"type":"function"},"character":{"name":"character","doc":"The character attached to this player, or nil if no character. Note:  It is not valid to access this attribute when the player is disconnected (see LuaPlayer::connected).","type":"LuaEntity","mode":"[Read-Write]"},"index":{"name":"index","doc":"This player's index in LuaGameScript::players.","type":"uint","mode":"[Read-only]"},"gui":{"name":"gui","doc":"","type":"LuaGui","mode":"[Read-only]"},"opened_self":{"name":"opened_self","doc":"true if the player opened itself. I.e. if they opened the character or god-controller GUI.","type":"boolean","mode":"[Read-only]"},"controller_type":{"name":"controller_type","doc":"","type":"defines.controllers","mode":"[Read-only]"},"game_view_settings":{"name":"game_view_settings","doc":"The player's game view settings.","type":"GameViewSettings","mode":"[Read-Write]"},"minimap_enabled":{"name":"minimap_enabled","doc":"true if the minimap is visible.","type":"boolean","mode":"[Read-Write]"},"color":{"name":"color","doc":"The colour associated with the player. This will be used to tint the player's character as well as their","type":"Color","mode":"[Read-Write]"},"name":{"name":"name","doc":"The player's username.","type":"string","mode":"[Read-Write]"},"tag":{"name":"tag","doc":"The tag that is shown after the player in chat and on the map.","type":"string","mode":"[Read-Write]"},"connected":{"name":"connected","doc":"true if the player is currently connected to the game.","type":"boolean","mode":"[Read-only]"},"admin":{"name":"admin","doc":"true if the player is an admin.","type":"boolean","mode":"[Read-only]"},"entity_copy_source":{"name":"entity_copy_source","doc":"The source entity used during entity settings copy-paste if any.","type":"LuaEntity","mode":"[Read-only]"},"afk_time":{"name":"afk_time","doc":"How many ticks since the last action of this player","type":"uint","mode":"[Read-only]"},"online_time":{"name":"online_time","doc":"How many ticks did this player spend playing this save (all sessions combined)","type":"uint","mode":"[Read-only]"},"permission_group":{"name":"permission_group","doc":"The permission group this player is part of or nil if not part of any group.","type":"LuaPermissionGroup","mode":"[Read-Write]"},"cursor_position":{"name":"cursor_position","doc":"Position of the player's mouse cursor. This is in screen coordinates.","type":"Position","mode":"[Write-only]"},"zoom":{"name":"zoom","doc":"The player's zoom-level.","type":"double","mode":"[Write-only]"}}},"LuaPermissionGroups":{"name":"LuaPermissionGroups","type":"LuaPermissionGroups","doc":"All permission groups.","properties":{"create_group":{"name":"create_group(name) → LuaPermissionGroup","doc":"Creates a new permission group.","returns":"LuaPermissionGroup","args":{"name":{"doc":"name :: string  (optional)","name":"name","type":"string"}},"type":"function"},"get_group":{"name":"get_group(group) → LuaPermissionGroup","doc":"Gets the permission group with the given name or group ID or nil if there is no matching group.","returns":"LuaPermissionGroup","args":{"group":{"doc":"group :: string or uint","name":"group","type":"string or uint"}},"type":"function"},"groups":{"name":"groups","doc":"All of the permission groups.","type":"array of LuaPermissionGroup","mode":"[Read-only]"}}},"LuaPermissionGroup":{"name":"LuaPermissionGroup","type":"LuaPermissionGroup","doc":"A permission group that defines what players in this group are allowed to do.","properties":{"add_player":{"name":"add_player(player) → boolean","doc":"Adds the given player to this group.","returns":"boolean","args":{"player":{"doc":"player :: PlayerSpecification","name":"player","type":"PlayerSpecification"}},"type":"function"},"remove_player":{"name":"remove_player(player) → boolean","doc":"Removes the given player from this group.","returns":"boolean","args":{"player":{"doc":"player :: PlayerSpecification","name":"player","type":"PlayerSpecification"}},"type":"function"},"allows_action":{"name":"allows_action(action) → boolean","doc":"If this group allows the given action.","returns":"boolean","args":{"action":{"doc":"action:  The defines.input_action value.","name":"action"}},"type":"function"},"set_allows_action":{"name":"set_allows_action(action, boolean) → boolean","doc":"Sets if the player is allowed to perform the given action.","returns":"boolean","args":{"action":{"doc":"action:  The defines.input_action value.","name":"action"},"boolean":{"name":"boolean","type":"boolean"}},"type":"function"},"destroy":{"name":"destroy() → boolean","doc":"Destroys this group.","returns":"boolean","args":{},"type":"function"},"name":{"name":"name","doc":"The name of this group.","type":"string","mode":"[Read-Write]"},"players":{"name":"players","doc":"The players in this group.","type":"array of LuaPlayer","mode":"[Read-only]"},"group_id":{"name":"group_id","doc":"The group ID","type":"uint","mode":"[Read-only]"}}},"LuaLogisticPoint":{"name":"LuaLogisticPoint","type":"LuaLogisticPoint","doc":"Logistic point of a particular LuaEntity. A \"Logistic point\" is the name given for\n settings and properties used by requester, provider, and storage points in a given logistic network.\n These \"points\" don't have to be a logistic container but often are. One other entity that can own several\n points is the \"player\" character type entity.","properties":{"owner":{"name":"owner","doc":"The LuaEntity owner of this LuaLogisticPoint.","type":"LuaEntity","mode":"[Read-only]"},"logistic_network":{"name":"logistic_network","doc":"","type":"LuaLogisticNetwork","mode":"[Read-only]"},"logistic_member_index":{"name":"logistic_member_index","doc":"The Logistic member index of this logistic point.","type":"uint","mode":"[Read-only]"},"filters":{"name":"filters","doc":"The logistic filters for this logistic point or nil if this doesn't use logistic filters.","type":"array of LogisticFilter","mode":"[Read-only]"},"mode":{"name":"mode","doc":"The logistic mode.","type":"defines.logistic_mode","mode":"[Read-only]"},"force":{"name":"force","doc":"The force of this logistic point.","type":"LuaForce","mode":"[Read-only]"},"targeted_items_pickup":{"name":"targeted_items_pickup","doc":"Items targeted to be picked up from this logistic point by robots.","type":"dictionary string → uint","mode":"[Read-only]"},"targeted_items_deliver":{"name":"targeted_items_deliver","doc":"Items targeted to be dropped off into this logistic point by robots.","type":"dictionary string → uint","mode":"[Read-only]"},"exact":{"name":"exact","doc":"If this logistic point is using the exact mode. In exact mode robots never over-deliver requests.","type":"boolean","mode":"[Read-only]"}}},"LuaLogisticNetwork":{"name":"LuaLogisticNetwork","type":"LuaLogisticNetwork","doc":"A single logistic network of a given force on a given surface.","properties":{"get_item_count":{"name":"get_item_count(item, member) → uint","doc":"Count given or all items in the network or given members.","returns":"uint","args":{"item":{"doc":"item :: string  (optional):  Item name to count. If not given, gives counts\n   of all items in the network.","name":"item","type":"string"},"member":{"doc":"member :: string  (optional):  Logistic members to check, must be either \"storage\"\n   or \"providers\". If not given, gives count in the entire network.","name":"member","type":"string"}},"type":"function"},"get_contents":{"name":"get_contents() → dictionary string → uint","doc":"Get item counts for the entire network.","returns":"dictionary string → uint","args":{},"type":"function"},"remove_item":{"name":"remove_item(item, members) → uint","doc":"Remove items from the logistic network. This will actually remove the items from some","returns":"uint","args":{"item":{"doc":"item :: SimpleItemStack:  What to remove.","name":"item","type":"SimpleItemStack"},"members":{"doc":"members :: string  (optional):  Which logistic members to remove from. Must be\n   \"storage\", \"passive-provider\", or \"active-provider\". If not specified, removes\n   from the network in the usual order.","name":"members","type":"string"}},"type":"function"},"insert":{"name":"insert(item, members) → uint","doc":"Insert items into the logistic network. This will actually insert the items into some","returns":"uint","args":{"item":{"doc":"item :: LuaItemStack:  What to insert.","name":"item","type":"LuaItemStack"},"members":{"doc":"members :: string  (optional):  Which logistic members to insert the items to. Must be\n   \"storage\", \"storage-empty\" (storage chests that are completely empty),\n   \"storage-empty-slot\" (storage chests that have an empty slot), or \"requester\". If not\n   specified, inserts items into the logistic network in the usual order.","name":"members","type":"string"}},"type":"function"},"find_cell_closest_to":{"name":"find_cell_closest_to(position) → LuaLogisticCell","doc":"Find logistic cell closest to a given position.  Parametersposition :: PositionReturn value May be nil if no cell was found.","returns":"LuaLogisticCell","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"}},"type":"function"},"available_logistic_robots":{"name":"available_logistic_robots","doc":"Number of logistic robots available for a job.","type":"uint","mode":"[Read-only]"},"all_logistic_robots":{"name":"all_logistic_robots","doc":"The total number of logistic robots in the network (idle and active + in roboports).","type":"uint","mode":"[Read-only]"},"available_construction_robots":{"name":"available_construction_robots","doc":"Number of construction robots available for a job.","type":"uint","mode":"[Read-only]"},"all_construction_robots":{"name":"all_construction_robots","doc":"The total number of construction robots in the network (idle and active + in roboports).","type":"uint","mode":"[Read-only]"},"robot_limit":{"name":"robot_limit","doc":"Maximum number of robots the network can work with. Currently only used for the personal","type":"uint","mode":"[Read-only]"},"cells":{"name":"cells","doc":"All cells in this network.","type":"array of LuaLogisticCell","mode":"[Read-only]"},"providers":{"name":"providers","doc":"All entities that have logistic provider points in this network.","type":"array of LuaEntity","mode":"[Read-only]"},"empty_providers":{"name":"empty_providers","doc":"All entities that have empty logistic provider points in this network.","type":"array of LuaEntity","mode":"[Read-only]"},"requesters":{"name":"requesters","doc":"All entities that have logistic requester points in this network.","type":"array of LuaEntity","mode":"[Read-only]"},"full_or_satisfied_requesters":{"name":"full_or_satisfied_requesters","doc":"All entities that have full or satisfied logistic requester points in this network.","type":"array of LuaEntity","mode":"[Read-only]"},"storages":{"name":"storages","doc":"All entities that have logistic storage points in this network.","type":"array of LuaEntity","mode":"[Read-only]"},"logistic_members":{"name":"logistic_members","doc":"All other entities that have logistic points in this network (inserters mostly).","type":"array of LuaEntity","mode":"[Read-only]"},"provider_points":{"name":"provider_points","doc":"All things that have provider points in this network.","type":"array of LuaLogisticPoint","mode":"[Read-only]"},"empty_provider_points":{"name":"empty_provider_points","doc":"All things that have empty provider points in this network.","type":"array of LuaLogisticPoint","mode":"[Read-only]"},"requester_points":{"name":"requester_points","doc":"All things that have requester points in this network.","type":"array of LuaLogisticPoint","mode":"[Read-only]"},"full_or_satisfied_requester_points":{"name":"full_or_satisfied_requester_points","doc":"All things that have full or satisfied requester points in this network.","type":"array of LuaLogisticPoint","mode":"[Read-only]"},"storage_points":{"name":"storage_points","doc":"All things that have storage points in this network.","type":"array of LuaLogisticPoint","mode":"[Read-only]"}}},"LuaLogisticCell":{"name":"LuaLogisticCell","type":"LuaLogisticCell","doc":"Logistic cell of a particular LuaEntity. A \"Logistic Cell\" is the given name for\n settings and properties used by what would normally be seen as a \"Roboport\". A logistic\n cell however doesn't have to be attached to the roboport entity (the player has one for\n the personal roboport).","properties":{"is_in_logistic_range":{"name":"is_in_logistic_range(position) → boolean","doc":"Is a given position within the logistic range of this cell?  Parametersposition :: Position","returns":"boolean","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"}},"type":"function"},"is_in_construction_range":{"name":"is_in_construction_range(position) → boolean","doc":"Is a given position within the construction range of this cell?  Parametersposition :: Position","returns":"boolean","args":{"position":{"doc":"position :: Position","name":"position","type":"Position"}},"type":"function"},"is_neighbour_with":{"name":"is_neighbour_with(other) → boolean","doc":"Are two cells neighbours?  Parametersother :: LuaLogisticCell","returns":"boolean","args":{"other":{"doc":"other :: LuaLogisticCell","name":"other","type":"LuaLogisticCell"}},"type":"function"},"logistic_radius":{"name":"logistic_radius","doc":"Logistic radius of this cell.","type":"float","mode":"[Read-only]"},"construction_radius":{"name":"construction_radius","doc":"Construction radius of this cell.","type":"float","mode":"[Read-only]"},"stationed_logistic_robot_count":{"name":"stationed_logistic_robot_count","doc":"Number of stationed logistic robots in this cell.","type":"uint","mode":"[Read-only]"},"stationed_construction_robot_count":{"name":"stationed_construction_robot_count","doc":"Number of stationed construction robots in this cell.","type":"uint","mode":"[Read-only]"},"mobile":{"name":"mobile","doc":"true if this is a mobile cell. In vanilla, only the logistic cell created by a player's personal","type":"boolean","mode":"[Read-only]"},"transmitting":{"name":"transmitting","doc":"true if this cell is active.","type":"boolean","mode":"[Read-only]"},"charge_approach_distance":{"name":"charge_approach_distance","doc":"Radius at which the robots hover when waiting to be charged.","type":"float","mode":"[Read-only]"},"charging_robot_count":{"name":"charging_robot_count","doc":"Number of robots currently charging.","type":"uint","mode":"[Read-only]"},"to_charge_robot_count":{"name":"to_charge_robot_count","doc":"Number of robots waiting to charge.","type":"uint","mode":"[Read-only]"},"owner":{"name":"owner","doc":"This cell's owner.","type":"LuaEntity","mode":"[Read-only]"},"logistic_network":{"name":"logistic_network","doc":"The network that owns this cell or nil.","type":"LuaLogisticNetwork","mode":"[Read-only]"},"neighbours":{"name":"neighbours","doc":"Neighbouring cells.","type":"array of LuaLogisticCell","mode":"[Read-only]"},"charging_robots":{"name":"charging_robots","doc":"Robots currently being charged.","type":"array of LuaEntity","mode":"[Read-only]"},"to_charge_robots":{"name":"to_charge_robots","doc":"Robots waiting to charge.","type":"array of LuaEntity","mode":"[Read-only]"}}},"LuaItemStack":{"name":"LuaItemStack","type":"LuaItemStack","doc":"A reference to an item and count owned by some external entity.","properties":{"is_blueprint_setup":{"name":"is_blueprint_setup() → boolean","doc":"Is this blueprint item setup? I.e. is it a non-empty blueprint?","returns":"boolean","args":{},"type":"function"},"get_blueprint_entities":{"name":"get_blueprint_entities() → array of blueprint entity","doc":"Entities in this blueprint.  Return value The fields of an entity table depend on the type of the entity. Every","returns":"array of blueprint entity","args":{},"type":"function"},"set_blueprint_entities":{"name":"set_blueprint_entities(entities)","doc":"Set new entities to be a part of this blueprint.","args":{"entities":{"doc":"entities :: array of blueprint entity:  New blueprint entities. The format is the same as in\n   LuaItemStack::get_blueprint_entities.","name":"entities","type":"array of blueprint entity"}},"type":"function"},"add_ammo":{"name":"add_ammo(amount)","doc":"Add ammo to this ammo item.  Parametersamount :: uint:  Amount of ammo to add.Can only be used if this is AmmoItem","args":{"amount":{"doc":"amount :: uint:  Amount of ammo to add.","name":"amount","type":"uint"}},"type":"function"},"drain_ammo":{"name":"drain_ammo(amount)","doc":"Remove ammo from this ammo item.  Parametersamount :: uint:  Amount of ammo to remove.Can only be used if this is AmmoItem","args":{"amount":{"doc":"amount :: uint:  Amount of ammo to remove.","name":"amount","type":"uint"}},"type":"function"},"add_durability":{"name":"add_durability(amount)","doc":"Add durability to this tool item.  Parametersamount :: double:  Amount of durability to add.Can only be used if this is ToolItem","args":{"amount":{"doc":"amount :: double:  Amount of durability to add.","name":"amount","type":"double"}},"type":"function"},"drain_durability":{"name":"drain_durability(amount)","doc":"Remove durability from this tool item.  Parametersamount :: double:  Amount of durability to remove.Can only be used if this is ToolItem","args":{"amount":{"doc":"amount :: double:  Amount of durability to remove.","name":"amount","type":"double"}},"type":"function"},"can_set_stack":{"name":"can_set_stack(stack) → boolean","doc":"Would a call to LuaItemStack::set_stack succeed?  Parametersstack :: LuaItemStack or SimpleItemStack  (optional):  Stack that would be set, possibly nil.","returns":"boolean","args":{"stack":{"doc":"stack :: LuaItemStack or SimpleItemStack  (optional):  Stack that would be set, possibly nil.","name":"stack","type":"LuaItemStack or SimpleItemStack"}},"type":"function"},"set_stack":{"name":"set_stack(stack) → boolean","doc":"Set this item stack to another item stack.  Parametersstack :: LuaItemStack or SimpleItemStack  (optional):","returns":"boolean","args":{"stack":{"doc":"stack :: LuaItemStack or SimpleItemStack  (optional): \n   Item stack to set this one to. Omitting this parameter or passing nil will clear this item stack, as\n   if by calling LuaItemStack::clear.","name":"stack","type":"LuaItemStack or SimpleItemStack"}},"type":"function"},"clear":{"name":"clear()","doc":"Clear this item stack.","args":{},"type":"function"},"get_blueprint_tiles":{"name":"get_blueprint_tiles() → array of blueprint tile","doc":"Tiles in this blueprint","returns":"array of blueprint tile","args":{},"type":"function"},"set_blueprint_tiles":{"name":"set_blueprint_tiles(tiles)","doc":"Set tiles in this blueprint","args":{"tiles":{"doc":"tiles :: array of blueprint tile:  Tiles to be a part of the blueprint; the format is the same as is\n   returned from the corresponding get function; see LuaItemStack::get_blueprint_tiles.","name":"tiles","type":"array of blueprint tile"}},"type":"function"},"get_inventory":{"name":"get_inventory(inventory) → LuaInventory","doc":"Access the inner inventory of an item.  Parametersinventory :: defines.inventory:","returns":"LuaInventory","args":{"inventory":{"doc":"inventory :: defines.inventory: \n   Index of the inventory to access -- currently can only be defines.inventory.item_main.","name":"inventory","type":"defines.inventory"}},"type":"function"},"build_blueprint":{"name":"build_blueprint{surface=…, force=…, position=…, force_build=…, direction=…} → array of LuaEntity","doc":"Build this blueprint","returns":"array of LuaEntity","args":{"surface":{"doc":"Table with the following fields: surface :: SurfaceSpecification:  Surface to build onforce :: string or LuaForce:  Force to use for the buildingposition :: Position:  The position to build atforce_build :: boolean  (optional):  When true, anything that can be built is else nothing is built if any one thing can't be builtdirection :: defines.direction  (optional):  The direction to use when building","name":"surface","type":"SurfaceSpecification"},"surface=…":{"name":"surface=…","type":"surface=…"},"force=…":{"name":"force=…","type":"force=…"},"position=…":{"name":"position=…","type":"position=…"},"force_build=…":{"name":"force_build=…","type":"force_build=…"},"direction=…":{"name":"direction=…","type":"direction=…"}},"type":"function"},"create_blueprint":{"name":"create_blueprint{surface=…, force=…, area=…, always_include_tiles=…}","doc":"Sets up this blueprint using the found blueprintable entities/tiles on the surface. Parameters Table with the following fields: surface :: SurfaceSpecification:  Surface to create fromforce :: string or LuaForce:  Force to use for the creationarea :: BoundingBox:  The bounding boxalways_include_tiles :: boolean  (optional):  When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.","args":{"surface":{"doc":"Table with the following fields: surface :: SurfaceSpecification:  Surface to create fromforce :: string or LuaForce:  Force to use for the creationarea :: BoundingBox:  The bounding boxalways_include_tiles :: boolean  (optional):  When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.","name":"surface","type":"SurfaceSpecification"},"surface=…":{"name":"surface=…","type":"surface=…"},"force=…":{"name":"force=…","type":"force=…"},"area=…":{"name":"area=…","type":"area=…"},"always_include_tiles=…":{"name":"always_include_tiles=…","type":"always_include_tiles=…"}},"type":"function"},"get_tag":{"name":"get_tag(tag_name) → Any","doc":"Gets the tag with the given name or returns nil if it doesn't exist.","returns":"Any","args":{"tag_name":{"doc":"tag_name :: string","name":"tag_name","type":"string"}},"type":"function"},"set_tag":{"name":"set_tag(tag_name, tag) → Any","doc":"Sets the tag with the given name and value.","returns":"Any","args":{"tag_name":{"doc":"tag_name :: string","name":"tag_name","type":"string"},"tag":{"doc":"tag :: Any","name":"tag","type":"Any"}},"type":"function"},"remove_tag":{"name":"remove_tag() → boolean","doc":"Removes a tag with the given name.","returns":"boolean","args":{},"type":"function"},"clear_blueprint":{"name":"clear_blueprint()","doc":"Clears this blueprint item.","args":{},"type":"function"},"get_entity_filter":{"name":"get_entity_filter(index) → string","doc":"Gets the entity filter at the given index for this deconstruction item.","returns":"string","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"}},"type":"function"},"set_entity_filter":{"name":"set_entity_filter(index, filter, DeconstructionItem) → boolean","doc":"Sets the entity filter ata the given index for this deconstruction item.","returns":"boolean","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"},"filter":{"doc":"filter :: string or LuaEntityPrototype or LuaEntity:  Setting to nil erases the filter.","name":"filter","type":"string or LuaEntityPrototype or LuaEntity"},"DeconstructionItem":{"name":"DeconstructionItem","type":"DeconstructionItem"}},"type":"function"},"get_tile_filter":{"name":"get_tile_filter(index) → string","doc":"Gets the tile filter at the given index for this deconstruction item.","returns":"string","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"}},"type":"function"},"set_tile_filter":{"name":"set_tile_filter(index, filter, DeconstructionItem) → boolean","doc":"Sets the tile filter ata the given index for this deconstruction item.","returns":"boolean","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"},"filter":{"doc":"filter :: string or LuaTilePrototype or LuaTile:  Setting to nil erases the filter.","name":"filter","type":"string or LuaTilePrototype or LuaTile"},"DeconstructionItem":{"name":"DeconstructionItem","type":"DeconstructionItem"}},"type":"function"},"clear_deconstruction_item":{"name":"clear_deconstruction_item()","doc":"Clears all settings/filters on this deconstruction item resetting it to default values.","args":{},"type":"function"},"valid_for_read":{"name":"valid_for_read","doc":"Is this valid for reading? Differs from the usual valid in that valid will be true even if","type":"boolean","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"Prototype of the item held in this stack.","type":"LuaItemPrototype","mode":"[Read-only]"},"name":{"name":"name","doc":"Prototype name of the item held in this stack.","type":"string","mode":"[Read-only]"},"type":{"name":"type","doc":"Type of the item prototype.","type":"string","mode":"[Read-only]"},"count":{"name":"count","doc":"Number of items in this stack.","type":"uint","mode":"[Read-Write]"},"grid":{"name":"grid","doc":"The equipment grid of this item or nil if this item doesn't have a grid.","type":"LuaEquipmentGrid","mode":"[Read-only]"},"health":{"name":"health","doc":"How much health the item has, as a number in range [0, 1].","type":"float","mode":"[Read-Write]"},"durability":{"name":"durability","doc":"Durability of the contained item. Automatically capped at the item's maximum durability.","type":"double","mode":"[Read-Write]"},"ammo":{"name":"ammo","doc":"Number of bullets left in the magazine.","type":"uint","mode":"[Read-Write]"},"blueprint_icons":{"name":"blueprint_icons","doc":"Icons of a blueprint item. Every entry of this array has the following fields: signal :: SignalID:  Slot icon to use. The slot will have the icon of the specified signal. This allows","type":"array of Icon","mode":"[Read-Write]"},"label":{"name":"label","doc":"The current label for this item. Nil when none.","type":"string","mode":"[Read-Write]"},"label_color":{"name":"label_color","doc":"The current label color for this item. Nil when none.","type":"Color","mode":"[Read-Write]"},"allow_manual_label_change":{"name":"allow_manual_label_change","doc":"If the label for this item can be manually changed. When false the label can only be changed through the API.","type":"boolean","mode":"[Read-Write]"},"cost_to_build":{"name":"cost_to_build","doc":"Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype name","type":"dictionary string → uint","mode":"[Read-only]"},"extends_inventory":{"name":"extends_inventory","doc":"If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventories.","type":"boolean","mode":"[Read-Write]"},"prioritize_insertion_mode":{"name":"prioritize_insertion_mode","doc":"The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventories.","type":"string","mode":"[Read-Write]"},"default_icons":{"name":"default_icons","doc":"The default icons for a blueprint item. Every entry of this array has the following fields: name :: string:  Prototype name of the item whose icon to useindex :: uint:  Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}. Can only be used if this is BlueprintItem","type":"array of Icon","mode":"[Read-only]"},"tags":{"name":"tags","doc":"Can only be used if this is ItemWithTags","type":"dictionary string → Any","mode":"[Read-Write]"},"custom_description":{"name":"custom_description","doc":"The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value.","type":"LocalisedString","mode":"[Read-Write]"},"entity_filters":{"name":"entity_filters","doc":"The entity filters for this deconstruction item.","type":"array of string","mode":"[Read-Write]"},"tile_filters":{"name":"tile_filters","doc":"The tile filters for this deconstruction item.","type":"array of string","mode":"[Read-Write]"},"entity_filter_mode":{"name":"entity_filter_mode","doc":"The blacklist/whitelist entity filter mode for this deconstruction item.","type":"defines.deconstruction_item.entity_filter_mode","mode":"[Read-Write]"},"tile_filter_mode":{"name":"tile_filter_mode","doc":"The blacklist/whitelist tile filter mode for this deconstruction item.","type":"defines.deconstruction_item.tile_filter_mode","mode":"[Read-Write]"},"tile_selection_mode":{"name":"tile_selection_mode","doc":"The tile selection mode for this deconstruction item.","type":"defines.deconstruction_item.tile_filter_mode","mode":"[Read-Write]"},"trees_only":{"name":"trees_only","doc":"If this deconstruction item is set to allow trees only.","type":"boolean","mode":"[Read-Write]"},"entity_filter_count":{"name":"entity_filter_count","doc":"The number of entity filters this deconstruction item supports.","type":"uint","mode":"[Read-only]"},"tile_filter_count":{"name":"tile_filter_count","doc":"The number of tile filters this deconstruction item supports.","type":"uint","mode":"[Read-only]"},"active_index":{"name":"active_index","doc":"The active blueprint index for this blueprint book.","type":"uint","mode":"[Read-Write]"}}},"LuaItemPrototype":{"name":"LuaItemPrototype","type":"LuaItemPrototype","doc":"Prototype of an item.","properties":{"has_flag":{"name":"has_flag(flag) → boolean","doc":"Does this prototype have a flag enabled?","returns":"boolean","args":{"flag":{"doc":"flag :: string:  The flag to check. Can be either \"goes-to-main-inventory\",\n   \"goes-to-quickbar\" or \"hidden\". Any other value will cause an error.","name":"flag","type":"string"}},"type":"function"},"get_ammo_type":{"name":"get_ammo_type(ammo_source_type)","doc":"Type of this ammo prototype or nil if this is not an ammo prototype.","args":{"ammo_source_type":{"doc":"ammo_source_type :: string  (optional):  \"default\", \"player\", \"turret\", or \"vehicle\"","name":"ammo_source_type","type":"string"}},"type":"function"},"type":{"name":"type","doc":"Type of this prototype. E.g. \"gun\" or \"mining-tool\".","type":"string","mode":"[Read-only]"},"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string.","type":"string","mode":"[Read-only]"},"place_result":{"name":"place_result","doc":"Prototype of the entity that will be created by placing this item, or nil if there is no such","type":"LuaEntityPrototype","mode":"[Read-only]"},"place_as_equipment_result":{"name":"place_as_equipment_result","doc":"Prototype of the equipment that will be created by placing this item in an equipment grid or nil if there is no equipment defined.","type":"LuaEquipmentPrototype","mode":"[Read-only]"},"place_as_tile_result":{"name":"place_as_tile_result","doc":"The place as tile result if one is defined else nil.","mode":"[Read-only]","type":"place_as_tile_result"},"stackable":{"name":"stackable","doc":"Is this item allowed to stack at all?","type":"boolean","mode":"[Read-only]"},"default_request_amount":{"name":"default_request_amount","doc":"The default request value.","type":"uint","mode":"[Read-only]"},"stack_size":{"name":"stack_size","doc":"Maximum stack size of the item specified by this prototype.","type":"uint","mode":"[Read-only]"},"fuel_category":{"name":"fuel_category","doc":"The fuel category or nil.","type":"string","mode":"[Read-only]"},"burnt_result":{"name":"burnt_result","doc":"The result of burning this item as fuel or nil.","type":"LuaItemPrototype","mode":"[Read-only]"},"fuel_value":{"name":"fuel_value","doc":"Fuel value when burned.","type":"float","mode":"[Read-only]"},"fuel_acceleration_multiplier":{"name":"fuel_acceleration_multiplier","doc":"The acceleration multiplier when this item is used as fuel in a vehicle.","type":"double","mode":"[Read-only]"},"fuel_top_speed_multiplier":{"name":"fuel_top_speed_multiplier","doc":"The fuel top speed multiplier when this item is used as fuel in a vehicle.","type":"double","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"The subgroup this prototype belongs to.","type":"LuaGroup","mode":"[Read-only]"},"group":{"name":"group","doc":"The group this prototype belongs to.","type":"LuaGroup","mode":"[Read-only]"},"flags":{"name":"flags","doc":"The item prototype flags for this item prototype. It is a dictionary where the keys are the set flags","type":"dictionary string → boolean","mode":"[Read-only]"},"magazine_size":{"name":"magazine_size","doc":"Size of full magazine; nil if this is not an ammo item.","type":"float","mode":"[Read-only]"},"equipment_grid":{"name":"equipment_grid","doc":"The prototype of this armor equipment grid or nil if none or this is not an armor item.","type":"LuaEquipmentGridPrototype","mode":"[Read-only]"},"resistances":{"name":"resistances","doc":"Resistances of this armour item; nil if not an armor or or the armor has no resistances.","type":"Resistances","mode":"[Read-only]"},"inventory_size_bonus":{"name":"inventory_size_bonus","doc":"The invntory size bonus for this armor prototype. nil if this isn't an armor prototype.","type":"uint","mode":"[Read-only]"},"capsule_action":{"name":"capsule_action","doc":"The capsule action for this capsule item prototype or nil if this isn't a capsule item prototype.","type":"CapsuleAction","mode":"[Read-only]"},"attack_parameters":{"name":"attack_parameters","doc":"The gun attack parameters or nil if not a gun item prototype.","type":"AttackParameters","mode":"[Read-only]"},"inventory_size":{"name":"inventory_size","doc":"The main inventory size for item-with-inventory-prototype. nil if not an item-with-inventory-prototype.","type":"uint","mode":"[Read-only]"},"item_filters":{"name":"item_filters","doc":"Can only be used if this is ItemWithInventory","type":"dictionary string → LuaItemPrototype","mode":"[Read-only]"},"group_filters":{"name":"group_filters","doc":"Can only be used if this is ItemWithInventory","type":"dictionary string → LuaGroup","mode":"[Read-only]"},"sub_group_filters":{"name":"sub_group_filters","doc":"Can only be used if this is ItemWithInventory","type":"dictionary string → LuaGroup","mode":"[Read-only]"},"filter_mode":{"name":"filter_mode","doc":"The filter mode used by this item with inventory.","type":"string","mode":"[Read-only]"},"insertion_priority_mode":{"name":"insertion_priority_mode","doc":"The insertion priority mode used by this item with inventory.","type":"string","mode":"[Read-only]"},"localised_filter_message":{"name":"localised_filter_message","doc":"The localised string used when the player attempts to put items into this item with inventory that aren't allowed.","type":"LocalisedString","mode":"[Read-only]"},"extend_inventory_by_default":{"name":"extend_inventory_by_default","doc":"If this item with inventory extends the inventory it resides in by default.","type":"boolean","mode":"[Read-only]"},"default_label_color":{"name":"default_label_color","doc":"The default label color used for this item with label. nil if not defined or if this isn't an item with label.","type":"Color","mode":"[Read-only]"},"draw_label_for_cursor_render":{"name":"draw_label_for_cursor_render","doc":"If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.","type":"boolean","mode":"[Read-only]"},"speed":{"name":"speed","doc":"Mining or repairing speed if this is a mining or repairing tool; otherwise nil.","type":"float","mode":"[Read-only]"},"attack_result":{"name":"attack_result","doc":"The attack result of this mining tool prototype.","type":"array of TriggerItem","mode":"[Read-only]"},"attack_range":{"name":"attack_range","doc":"The attack range of this mining tool or nil if not a mining tool.","type":"float","mode":"[Read-only]"},"module_effects":{"name":"module_effects","doc":"Effects of this module; nil if this is not a module. It is a dictionary indexed by the effect type.","type":"dictionary string → EffectValue","mode":"[Read-only]"},"category":{"name":"category","doc":"The module category name","type":"string","mode":"[Read-only]"},"tier":{"name":"tier","doc":"The module tier","type":"float","mode":"[Read-only]"},"limitations":{"name":"limitations","doc":"An array of recipe names this module is allowed to work with.","type":"array of string","mode":"[Read-only]"},"limitation_message_key":{"name":"limitation_message_key","doc":"The limitation message key used when the player attempts to use this modules in some place it's not allowed.","type":"string","mode":"[Read-only]"},"straight_rail":{"name":"straight_rail","doc":"The straight rail prototype used for this rail planner prototype.","type":"LuaEntityPrototype","mode":"[Read-only]"},"curved_rail":{"name":"curved_rail","doc":"The curved rail prototype used for this rail planner prototype.","type":"LuaEntityPrototype","mode":"[Read-only]"},"repair_result":{"name":"repair_result","doc":"The repair result of this repair tool prototype or nil if this isn't a repair tool prototype.","type":"array of TriggerItem","mode":"[Read-only]"},"selection_border_color":{"name":"selection_border_color","doc":"The color used when doing normal selection with this selection tool prototype.","type":"Color","mode":"[Read-only]"},"alt_selection_border_color":{"name":"alt_selection_border_color","doc":"The color used when doing alt selection with this selection tool prototype.","type":"Color","mode":"[Read-only]"},"selection_mode_flags":{"name":"selection_mode_flags","doc":"Flags that affect which entities will be selected.","type":"SelectionModeFlags","mode":"[Read-only]"},"alt_selection_mode_flags":{"name":"alt_selection_mode_flags","doc":"Flags that affect which entities will be selected during alternate selection.","type":"SelectionModeFlags","mode":"[Read-only]"},"selection_cursor_box_type":{"name":"selection_cursor_box_type","doc":"Can only be used if this is SelectionTool","type":"string","mode":"[Read-only]"},"alt_selection_cursor_box_type":{"name":"alt_selection_cursor_box_type","doc":"Can only be used if this is SelectionTool","type":"string","mode":"[Read-only]"},"always_include_tiles":{"name":"always_include_tiles","doc":"If tiles area always included when doing selection with this selection tool prototype.","type":"boolean","mode":"[Read-only]"},"entity_filter_slots":{"name":"entity_filter_slots","doc":"The number of entity filters this deconstruction item has or nil if this isn't a deconstruction item prototype.","type":"uint","mode":"[Read-only]"},"tile_filter_slots":{"name":"tile_filter_slots","doc":"The number of tile filters this deconstruction item has or nil if this isn't a deconstruction item prototype.","type":"uint","mode":"[Read-only]"},"durability_description_key":{"name":"durability_description_key","doc":"The durability message key used when displaying the durability of this tool.","type":"string","mode":"[Read-only]"},"durability":{"name":"durability","doc":"The durability of this tool item or nil if not a tool item.","type":"double","mode":"[Read-only]"}}},"LuaInventory":{"name":"LuaInventory","type":"LuaInventory","doc":"A storage of item stacks.","properties":{"clear":{"name":"clear()","doc":"Make this inventory empty.","args":{},"type":"function"},"can_insert":{"name":"can_insert(items) → boolean","doc":"Can at least some items be inserted?  Parametersitems :: SimpleItemStack:  Items that would be inserted.Return value true if at least a part of the given items could be inserted into this inventory.","returns":"boolean","args":{"items":{"doc":"items :: SimpleItemStack:  Items that would be inserted.","name":"items","type":"SimpleItemStack"}},"type":"function"},"insert":{"name":"insert(items) → uint","doc":"Insert items into this inventory.  Parametersitems :: SimpleItemStack:  Items to insert.Return value Number of items actually inserted.","returns":"uint","args":{"items":{"doc":"items :: SimpleItemStack:  Items to insert.","name":"items","type":"SimpleItemStack"}},"type":"function"},"remove":{"name":"remove(items) → uint","doc":"Remove items from this inventory.  Parametersitems :: SimpleItemStack:  Items to remove.Return value Number of items actually removed.","returns":"uint","args":{"items":{"doc":"items :: SimpleItemStack:  Items to remove.","name":"items","type":"SimpleItemStack"}},"type":"function"},"get_item_count":{"name":"get_item_count(item) → uint","doc":"Get the number of all or some items in this inventory.  Parametersitem :: string  (optional):  Prototype name of the item to count. If not specified, count all items.","returns":"uint","args":{"item":{"doc":"item :: string  (optional):  Prototype name of the item to count. If not specified, count all items.","name":"item","type":"string"}},"type":"function"},"is_empty":{"name":"is_empty() → boolean","doc":"Does this inventory contain nothing?","returns":"boolean","args":{},"type":"function"},"get_contents":{"name":"get_contents() → dictionary string → uint","doc":"Get counts of all items in this inventory. Return value The counts, indexed by item names.","returns":"dictionary string → uint","args":{},"type":"function"},"hasbar":{"name":"hasbar() → boolean","doc":"Does this inventory have a bar? Bar is the draggable red thing, found for example on chests,","returns":"boolean","args":{},"type":"function"},"getbar":{"name":"getbar() → uint","doc":"Get the current bar. This is the index at which the red area starts.  Note:  Only useable if this inventory has a bar.","returns":"uint","args":{},"type":"function"},"setbar":{"name":"setbar(bar)","doc":"Set the current bar.  Parametersbar :: uint  (optional):  The new limit. Ommitting this parameter will clear the limit.Note:  Only useable if this inventory has a bar.","args":{"bar":{"doc":"bar :: uint  (optional):  The new limit. Ommitting this parameter will clear the limit.","name":"bar","type":"uint"}},"type":"function"},"supports_filters":{"name":"supports_filters() → boolean","doc":"If this inventory supports filters.","returns":"boolean","args":{},"type":"function"},"is_filtered":{"name":"is_filtered() → boolean","doc":"If this inventory supports filters and has at least 1 filter set.","returns":"boolean","args":{},"type":"function"},"can_set_filter":{"name":"can_set_filter(index, filter) → boolean","doc":"If the given inventory slot filter can be set to the given filter.","returns":"boolean","args":{"index":{"doc":"index :: uint:  The item stack index","name":"index","type":"uint"},"filter":{"doc":"filter :: string:  The item name of the filter","name":"filter","type":"string"}},"type":"function"},"get_filter":{"name":"get_filter(index) → string","doc":"Gets the filter for the given item stack index.","returns":"string","args":{"index":{"doc":"index :: uint:  The item stack index","name":"index","type":"uint"}},"type":"function"},"set_filter":{"name":"set_filter(index, filter) → boolean","doc":"Sets the filter for the given item stack index.","returns":"boolean","args":{"index":{"doc":"index :: uint:  The item stack index","name":"index","type":"uint"},"filter":{"doc":"filter :: string:  The new filter or nil to erase the filter","name":"filter","type":"string"}},"type":"function"},"find_item_stack":{"name":"find_item_stack(item) → LuaItemStack","doc":"Gets the first LuaItemStack in the inventory that matches the given item name.","returns":"LuaItemStack","args":{"item":{"doc":"item :: string:  The item name to find","name":"item","type":"string"}},"type":"function"},"operator #":{"name":"operator #","doc":"Get the number of slots in this inventory.","type":"uint","mode":"[Read-only]"},"index":{"name":"index","doc":"The inventory index this inventory uses.","type":"uint","mode":"[Read-only]"},"entity_owner":{"name":"entity_owner","doc":"The entity that owns this inventory or nil if this isn't owned by an entity.","type":"LuaEntity","mode":"[Read-only]"},"player_owner":{"name":"player_owner","doc":"The player that owns this inventory or nil if this isn't owned by a player.","type":"LuaPlayer","mode":"[Read-only]"},"equipment_owner":{"name":"equipment_owner","doc":"The equipment that owns this inventory or nil if this isn't owned by an equipment.","type":"LuaEntity","mode":"[Read-only]"},"operator []":{"name":"operator []","doc":"The indexing operator.","type":"LuaItemStack","mode":"[Read-only]"}}},"LuaGuiElement":{"name":"LuaGuiElement","type":"LuaGuiElement","doc":"An element of the custom GUI. This type is used to represent any kind of a GUI element -- labels as well\n as buttons as well as frames are all instances of this type. Just like LuaEntity, different kinds\n of elements support different attributes; attempting to access an attribute on an element that doesn't support\n it (for instance, trying to access the value of a text field) will result in a run-time error.","properties":{"add":{"name":"add{type=…, name=…, style=…} → LuaGuiElement","doc":"Add a child element.  Parameters Table with the following fields: type :: string:  The kind of the element to add. Has to be one of \"button\", \"sprite-button\",","returns":"LuaGuiElement","args":{"type":{"doc":"Table with the following fields: type :: string:  The kind of the element to add. Has to be one of \"button\", \"sprite-button\",\n     \"checkbox\", \"flow\", \"frame\", \"label\", \"table\", \"progressbar\", \"textfield\", \"radio-button\", \"sprite\", \"scroll-pane\", \"camera\", or \"drop-down\".name :: string:  Name of the child element.style :: string  (optional):  Style of the new element. Other attributes may have to be specified, depending on typesprite-buttonsprite :: SpritePath  (optional):  Path to the image to display on the button.checkboxstate :: boolean:  Whether the checkbox should be checked by default.radio-buttonstate :: boolean:  Whether the radio-button should be checked by default.framedirection :: string:  The initial direction of the frame's layout. See LuaGuiElement::direction.labelcaption :: string  (optional):  Initial text to display on the label.single_line :: boolean  (optional):  If text should be shown on a single line or wrapped based off the max width of the label.want_ellipsis :: boolean  (optional):  If text beyond the widget width should be shown as \"...\" instead of clipped. Can't be used with single_line==falseprogressbarsize :: uint:  Width of the progressbar.value :: double  (optional):  Initial value of the progressbar, in range [0, 1]. Defaults to 0 if not given.tablecolspan :: uint:  Number of columnsdrop-downitems :: array of LocalisedString  (optional):  The initial items in the dropdown.selected_index :: uint  (optional):  The initial selected index.cameraposition :: Position:  The position the camera centers on.surface_index :: uint  (optional):  The surface the camera will render else if not given the players surface is used.zoom :: double  (optional):  The camera zoom - defaults to 0.75.choose-elem-buttonelem_type :: string:  \"item\", \"tile\", \"entity\", or \"signal\"item :: string  (optional):  If type is \"item\" - the default value for the buttonentity :: string  (optional):  If type is \"entity\" - the default value for the buttontile :: string  (optional):  If type is \"tile\" - the default value for the buttonsignal :: SignalID  (optional):  If type is \"signal\" - the default value for the button","name":"type","type":"string"},"type=…":{"name":"type=…","type":"type=…"},"name=…":{"name":"name=…","type":"name=…"},"style=…":{"name":"style=…","type":"style=…"}},"type":"function"},"clear":{"name":"clear()","doc":"Remove children of this element. Any LuaGuiElement objects referring to the destroyed","args":{},"type":"function"},"destroy":{"name":"destroy()","doc":"Remove this element, along with its children. Any LuaGuiElement objects referring to the destroyed","args":{},"type":"function"},"clear_items":{"name":"clear_items()","doc":"Clears the items in this dropdown.","args":{},"type":"function"},"get_item":{"name":"get_item(index) → LocalisedString","doc":"Gets an item at the given index from this dropdown.","returns":"LocalisedString","args":{"index":{"doc":"index :: uint:  The index to get.","name":"index","type":"uint"}},"type":"function"},"set_item":{"name":"set_item(index, LocalisedString)","doc":"Sets an item at the given index in this dropdown.","args":{"index":{"doc":"index :: uint:  The index","name":"index","type":"uint"},"LocalisedString":{"doc":"LocalisedString:  The item.","name":"LocalisedString"}},"type":"function"},"add_item":{"name":"add_item(LocalisedString, index)","doc":"Adds an item at the end or at the given index in this dropdown.","args":{"LocalisedString":{"doc":"LocalisedString:  The item.","name":"LocalisedString"},"index":{"doc":"index :: uint  (optional):  The index","name":"index","type":"uint"}},"type":"function"},"gui":{"name":"gui","doc":"The GUI this element is a part of.","type":"LuaGui","mode":"[Read-only]"},"parent":{"name":"parent","doc":"The direct parent of this element; nil if this is a top-level element.","type":"LuaGuiElement","mode":"[Read-only]"},"name":{"name":"name","doc":"The name of this element. Example","type":"string","mode":"[Read-only]"},"caption":{"name":"caption","doc":"The text displayed on the element. For frames, this is the \"heading\". For other elements, like buttons or","type":"LocalisedString","mode":"[Read-Write]"},"value":{"name":"value","doc":"How much this progress bar is filled. It is a value in range [0, 1]. Can only be used if this is progressbar","type":"double","mode":"[Read-Write]"},"direction":{"name":"direction","doc":"Direction of the layout. May be either \"horizontal\" or \"vertical\".  Can only be used if this is frame","type":"string","mode":"[Read-Write]"},"style":{"name":"style","doc":"The style of this element. When read, this evaluates to a LuaStyle. For writing, it only accepts","type":"LuaStyle or string","mode":"[Read-Write]"},"text":{"name":"text","doc":"The text contained in a textfield. Can only be used if this is textfield","type":"string","mode":"[Read-Write]"},"children_names":{"name":"children_names","doc":"Names of all the children of this element. These are the identifiers that can be used to access the child","type":"array of string","mode":"[Read-only]"},"state":{"name":"state","doc":"Is this checkbox checked? Can only be used if this is checkbox","type":"boolean","mode":"[Read-Write]"},"player_index":{"name":"player_index","doc":"Index into LuaGameScript::players specifying the player who owns this element.","type":"uint","mode":"[Read-only]"},"sprite":{"name":"sprite","doc":"Path the the image to display on this sprite-button.","type":"SpritePath","mode":"[Read-Write]"},"tooltip":{"name":"tooltip","doc":"","type":"LocalisedString","mode":"[Read-Write]"},"vertical_scroll_policy":{"name":"vertical_scroll_policy","doc":"Allowed values are: \"always\", \"never\", or \"auto\"","type":"string","mode":"[Read-Write]"},"horizontal_scroll_policy":{"name":"horizontal_scroll_policy","doc":"Allowed values are: \"always\", \"never\", or \"auto\"","type":"string","mode":"[Read-Write]"},"type":{"name":"type","doc":"The type of this GUI element.","type":"string","mode":"[Read-only]"},"children":{"name":"children","doc":"The children elements","type":"array of LuaGuiElement","mode":"[Read-only]"},"items":{"name":"items","doc":"The items in this dropdown.","type":"array of LocalisedString","mode":"[Read-Write]"},"selected_index":{"name":"selected_index","doc":"The selected index for this dropdown. 0 if none.","type":"uint","mode":"[Read-Write]"},"single_line":{"name":"single_line","doc":"If this label should render its contents on single line or multiple based off the max width of the label.","type":"boolean","mode":"[Read-Write]"},"want_ellipsis":{"name":"want_ellipsis","doc":"If this label text should render text outside the label area as \"...\".","type":"boolean","mode":"[Read-Write]"},"position":{"name":"position","doc":"The position this camera is focused on.","type":"Position","mode":"[Read-Write]"},"surface_index":{"name":"surface_index","doc":"The surface index this camera is using.","type":"uint","mode":"[Read-Write]"},"zoom":{"name":"zoom","doc":"The zoom this camera is using.","type":"double","mode":"[Read-Write]"},"elem_type":{"name":"elem_type","doc":"The elem type of this choose-elem-button.","type":"string","mode":"[Read-only]"},"elem_value":{"name":"elem_value","doc":"The elem value of this choose-elem-button or nil if there is no value.","type":"string or SignalID","mode":"[Read-Write]"}}},"LuaGui":{"name":"LuaGui","type":"LuaGui","doc":"The root of the GUI. This type houses the root elements, top, left, center and goal, to which\n other elements can be added to be displayed on screen.","properties":{"is_valid_sprite_path":{"name":"is_valid_sprite_path(sprite_path) → boolean","doc":"Returns true if sprite_path is valid and contains loaded sprite, otherwise false.","returns":"boolean","args":{"sprite_path":{"doc":"sprite_path :: SpritePath:  Path to a image.","name":"sprite_path","type":"SpritePath"}},"type":"function"},"player":{"name":"player","doc":"The player who owns this gui.","type":"LuaPlayer","mode":"[Read-only]"},"children":{"name":"children","doc":"The children GUI elements mapped by name <> element.","type":"dictionary string → LuaGuiElement","mode":"[Read-only]"},"top":{"name":"top","doc":"The top part of the GUI. It is a flow element.","type":"LuaGuiElement","mode":"[Read-only]"},"left":{"name":"left","doc":"The left part of the GUI. It is a flow element.","type":"LuaGuiElement","mode":"[Read-only]"},"center":{"name":"center","doc":"The center part of the GUI. It is a flow element.","type":"LuaGuiElement","mode":"[Read-only]"},"goal":{"name":"goal","doc":"The flow used in the objectives window. It is a flow element.","type":"LuaGuiElement","mode":"[Read-only]"}}},"LuaGroup":{"name":"LuaGroup","type":"LuaGroup","doc":"Item group or subgroup.","properties":{"name":{"name":"name","doc":"","type":"string","mode":"[Read-only]"},"type":{"name":"type","doc":"","type":"string","mode":"[Read-only]"},"group":{"name":"group","doc":"The parent group if any; nil if none.","type":"LuaGroup","mode":"[Read-only]"},"subgroups":{"name":"subgroups","doc":"Subgroups of this group. Note:  Can only be used on groups, not on subgroups.","type":"array of LuaGroup","mode":"[Read-only]"},"order":{"name":"order","doc":"","type":"string","mode":"[Read-only]"}}},"LuaGameScript":{"name":"LuaGameScript","type":"LuaGameScript","doc":"Main toplevel type, provides access to most of the API though its members. An instance\n of LuaGameScript is available as the global object named game.","properties":{"help":{"name":"help()","doc":"Internal","args":{},"type":"function"},"set_game_state":{"name":"set_game_state{game_finished=…, player_won=…, next_level=…, can_continue=…}","doc":"Set scenario state.","args":{"game_finished":{"doc":"Table with the following fields: game_finished :: booleanplayer_won :: booleannext_level :: stringcan_continue :: boolean","name":"game_finished","type":"boolean"},"game_finished=…":{"name":"game_finished=…","type":"game_finished=…"},"player_won=…":{"name":"player_won=…","type":"player_won=…"},"next_level=…":{"name":"next_level=…","type":"next_level=…"},"can_continue=…":{"name":"can_continue=…","type":"can_continue=…"}},"type":"function"},"get_entity_by_tag":{"name":"get_entity_by_tag(tag) → LuaEntity","doc":"Parameterstag :: string","returns":"LuaEntity","args":{"tag":{"doc":"tag :: string","name":"tag","type":"string"}},"type":"function"},"show_message_dialog":{"name":"show_message_dialog{text=…, image=…, point_to=…}","doc":"Show an in-game message dialog.","args":{"text":{"doc":"Table with the following fields: text :: LocalisedString:  What the dialog should sayimage :: string  (optional):  Path to an image to show on the dialogpoint_to :: GuiArrowSpecification  (optional): \n     If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position.\n     (Use point_to={type=\"nowhere\"} to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.","name":"text","type":"LocalisedString"},"text=…":{"name":"text=…","type":"text=…"},"image=…":{"name":"image=…","type":"image=…"},"point_to=…":{"name":"point_to=…","type":"point_to=…"}},"type":"function"},"disable_tips_and_tricks":{"name":"disable_tips_and_tricks()","doc":"Disable showing tips and tricks.","args":{},"type":"function"},"is_demo":{"name":"is_demo() → boolean","doc":"Is this the demo version of Factorio?","returns":"boolean","args":{},"type":"function"},"reload_script":{"name":"reload_script()","doc":"Forces a reload of the scenario script when the save game without the migration is loaded.","args":{},"type":"function"},"save_atlas":{"name":"save_atlas()","doc":"Saves the current configuration of Atlas to a file. This will result in huge file containing all","args":{},"type":"function"},"check_consistency":{"name":"check_consistency()","doc":"Run internal consistency checks. Allegedly prints any errors it finds. Note:  Exists mainly for debugging reasons.","args":{},"type":"function"},"regenerate_entity":{"name":"regenerate_entity(entitites)","doc":"Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.","args":{"entitites":{"doc":"entitites :: string or array of string: \n   Prototype names of entity or entities to autoplace.","name":"entitites","type":"string or array of string"}},"type":"function"},"take_screenshot":{"name":"take_screenshot{player=…, by_player=…, position=…, resolution=…, zoom=…, path=…, show_gui=…, show_entity_info=…, anti_alias=…}","doc":"Take a screenshot and save it to a file.","args":{"player":{"doc":"Table with the following fields: player :: PlayerSpecification  (optional)by_player :: PlayerSpecification  (optional):  If defined, the screenshot will only be taken for this player.position :: Position  (optional)resolution :: Position  (optional):  Maximum allowed resolution is 16384x16384 (resp. 8196x8196 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).zoom :: double  (optional)path :: string  (optional):  Path to save the screenshot inshow_gui :: boolean  (optional):  Include game GUI in the screenshot?show_entity_info :: boolean  (optional):  Include entity info (alt-mode)?anti_alias :: boolean  (optional):  Render in double resolution and scale down (including GUI)?","name":"player","type":"PlayerSpecification"},"player=…":{"name":"player=…","type":"player=…"},"by_player=…":{"name":"by_player=…","type":"by_player=…"},"position=…":{"name":"position=…","type":"position=…"},"resolution=…":{"name":"resolution=…","type":"resolution=…"},"zoom=…":{"name":"zoom=…","type":"zoom=…"},"path=…":{"name":"path=…","type":"path=…"},"show_gui=…":{"name":"show_gui=…","type":"show_gui=…"},"show_entity_info=…":{"name":"show_entity_info=…","type":"show_entity_info=…"},"anti_alias=…":{"name":"anti_alias=…","type":"anti_alias=…"}},"type":"function"},"write_file":{"name":"write_file(filename, data, append, for_player)","doc":"Write a string to a file.    Parametersfilename :: string:  Path to the file to write todata :: string:  File contentappend :: boolean  (optional):  When true, this will append to the end of the file. Defaults to false,for_player :: uint  (optional):  If given, the file will only be written for this player_index. 0 means only the server if one exists.","args":{"filename":{"doc":"filename :: string:  Path to the file to write to","name":"filename","type":"string"},"data":{"doc":"data :: string:  File content","name":"data","type":"string"},"append":{"doc":"append :: boolean  (optional):  When true, this will append to the end of the file. Defaults to false,","name":"append","type":"boolean"},"for_player":{"doc":"for_player :: uint  (optional):  If given, the file will only be written for this player_index. 0 means only the server if one exists.\n   which will overwrite any pre-existing file with the new data.","name":"for_player","type":"uint"}},"type":"function"},"remove_path":{"name":"remove_path(path)","doc":"Remove file or directory. Given path is taken relative to the script output directory. Can be used","args":{"path":{"doc":"path :: string:  Path to remove, relative to the script output directory","name":"path","type":"string"}},"type":"function"},"remove_offline_players":{"name":"remove_offline_players(players)","doc":"Remove players who are currently not connected from the map.","args":{"players":{"doc":"players :: array of LuaPlayer or string  (optional):  List of players to remove. If not specified,\n   remove all offline players.","name":"players","type":"array of LuaPlayer or string"}},"type":"function"},"force_crc":{"name":"force_crc()","doc":"Force a CRC check. Tells all peers to calculate their current map CRC; these CRC are then compared","args":{},"type":"function"},"create_force":{"name":"create_force(force) → LuaForce","doc":"Create a new force.","returns":"LuaForce","args":{"force":{"doc":"force :: string:  Name of the new force","name":"force","type":"string"}},"type":"function"},"merge_forces":{"name":"merge_forces(source, destination)","doc":"Merge two forces together. All entities in the source force will be reassigned to the target force.","args":{"source":{"doc":"source :: string or LuaForce:  The force to remove","name":"source","type":"string or LuaForce"},"destination":{"doc":"destination :: string or LuaForce:  The force to reassign all entities to","name":"destination","type":"string or LuaForce"}},"type":"function"},"create_surface":{"name":"create_surface(name, settings) → LuaSurface","doc":"Create a new surface   Parametersname :: string:  Name of the new surfacesettings :: MapGenSettings  (optional):  Map generation settingsReturn value The surface that was just created","returns":"LuaSurface","args":{"name":{"doc":"name :: string:  Name of the new surface","name":"name","type":"string"},"settings":{"doc":"settings :: MapGenSettings  (optional):  Map generation settings","name":"settings","type":"MapGenSettings"}},"type":"function"},"server_save":{"name":"server_save(name)","doc":"Instruct the server to save the map.","args":{"name":{"doc":"name :: string  (optional):  Save name. If not specified, writes into the currently-running save.","name":"name","type":"string"}},"type":"function"},"delete_surface":{"name":"delete_surface(surface)","doc":"Deletes the given surface and all entities on it.","args":{"surface":{"doc":"surface :: string or LuaSurface:  The surface to be deleted. Currently the primary surface (0, 'nauvis') cannot be deleted.","name":"surface","type":"string or LuaSurface"}},"type":"function"},"disable_replay":{"name":"disable_replay()","doc":"Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.","args":{},"type":"function"},"direction_to_string":{"name":"direction_to_string(direction)","doc":"Converts the given direction into the string version of the direction.","args":{"direction":{"doc":"direction :: defines.direction","name":"direction","type":"defines.direction"}},"type":"function"},"print":{"name":"print(message)","doc":"Print text to the chat console all players. Parametersmessage :: LocalisedString","args":{"message":{"doc":"message :: LocalisedString","name":"message","type":"LocalisedString"}},"type":"function"},"create_random_generator":{"name":"create_random_generator(seed) → LuaRandomGenerator","doc":"Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.","returns":"LuaRandomGenerator","args":{"seed":{"doc":"seed :: uint  (optional)","name":"seed","type":"uint"}},"type":"function"},"player":{"name":"player","doc":"The player typing at the console - nil in all other instances. See LuaGameScript::players for accessing all players.","type":"LuaPlayer","mode":"[Read-only]"},"players":{"name":"players","doc":"Note:  This is a sparse table so pairs(), a known player index, or player name should be used to access elements.","type":"custom dictionary uint or string → LuaPlayer","mode":"[Read-only]"},"map_settings":{"name":"map_settings","doc":"","type":"MapSettings","mode":"[Read-only]"},"difficulty_settings":{"name":"difficulty_settings","doc":"Although it can be done; because different difficulties can have different technology or recipe trees it's not recomended to change difficulty settings mid-game.","type":"DifficultySettings","mode":"[Read-only]"},"difficulty":{"name":"difficulty","doc":"Current scenario difficulty.","type":"defines.difficulty","mode":"[Read-only]"},"forces":{"name":"forces","doc":"","type":"custom dictionary string → LuaForce","mode":"[Read-only]"},"entity_prototypes":{"name":"entity_prototypes","doc":"","type":"custom dictionary string → LuaEntityPrototype","mode":"[Read-only]"},"item_prototypes":{"name":"item_prototypes","doc":"","type":"custom dictionary string → LuaItemPrototype","mode":"[Read-only]"},"fluid_prototypes":{"name":"fluid_prototypes","doc":"","type":"custom dictionary string → LuaFluidPrototype","mode":"[Read-only]"},"tile_prototypes":{"name":"tile_prototypes","doc":"","type":"custom dictionary string → LuaTilePrototype","mode":"[Read-only]"},"equipment_prototypes":{"name":"equipment_prototypes","doc":"","type":"custom dictionary string → LuaEquipmentPrototype","mode":"[Read-only]"},"damage_prototypes":{"name":"damage_prototypes","doc":"","type":"custom dictionary string → LuaDamagePrototype","mode":"[Read-only]"},"virtual_signal_prototypes":{"name":"virtual_signal_prototypes","doc":"","type":"custom dictionary string → LuaVirtualSignalPrototype","mode":"[Read-only]"},"equipment_grid_prototypes":{"name":"equipment_grid_prototypes","doc":"","type":"custom dictionary string → LuaEquipmentGridPrototype","mode":"[Read-only]"},"recipe_prototypes":{"name":"recipe_prototypes","doc":"","type":"custom dictionary string → LuaRecipePrototype","mode":"[Read-only]"},"technology_prototypes":{"name":"technology_prototypes","doc":"","type":"custom dictionary string → LuaTechnologyPrototype","mode":"[Read-only]"},"decorative_prototypes":{"name":"decorative_prototypes","doc":"","type":"custom dictionary string → LuaDecorativePrototype","mode":"[Read-only]"},"tick":{"name":"tick","doc":"Current map tick.","type":"uint","mode":"[Read-only]"},"finished":{"name":"finished","doc":"Is the scenario finished?","type":"boolean","mode":"[Read-only]"},"speed":{"name":"speed","doc":"Speed to update the map at. 1.0 is normal speed -- 60 UPS.","type":"float","mode":"[Read-Write]"},"surfaces":{"name":"surfaces","doc":"","type":"custom dictionary string → LuaSurface","mode":"[Read-only]"},"active_mods":{"name":"active_mods","doc":"The active mods versions. The keys are mod names, the values are the versions.","type":"dictionary string → string","mode":"[Read-only]"},"connected_players":{"name":"connected_players","doc":"The online players","type":"array of LuaPlayer","mode":"[Read-only]"},"permissions":{"name":"permissions","doc":"","type":"LuaPermissionGroups","mode":"[Read-only]"}}},"LuaForce":{"name":"LuaForce","type":"LuaForce","doc":"LuaForce encapsulates data local to each \"force\" or \"faction\" of the game.\n Default forces are player, enemy and neutral. Players and mods can create\n additional forces (up to 64 total).","properties":{"get_entity_count":{"name":"get_entity_count(name) → uint","doc":"Count entities of given type.","returns":"uint","args":{"name":{"doc":"name :: string:  Prototype name of the entity.","name":"name","type":"string"}},"type":"function"},"disable_research":{"name":"disable_research()","doc":"Disable research for this force.","args":{},"type":"function"},"enable_research":{"name":"enable_research()","doc":"Enable research for this force.","args":{},"type":"function"},"disable_all_prototypes":{"name":"disable_all_prototypes()","doc":"Disable all recipes and technologies. Only recipes and technologies enabled explicitly will","args":{},"type":"function"},"reset_recipes":{"name":"reset_recipes()","doc":"Load the original version of all recipes from the prototypes.","args":{},"type":"function"},"enable_all_recipes":{"name":"enable_all_recipes()","doc":"Unlock all recipes.","args":{},"type":"function"},"enable_all_technologies":{"name":"enable_all_technologies()","doc":"Unlock all technologies.","args":{},"type":"function"},"research_all_technologies":{"name":"research_all_technologies(include_disabled_prototypes)","doc":"Research all technologies.","args":{"include_disabled_prototypes":{"doc":"include_disabled_prototypes (optional):  If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.","name":"include_disabled_prototypes"}},"type":"function"},"reset_technologies":{"name":"reset_technologies()","doc":"Load the original versions of technologies from prototypes. Preserves research state of technologies.","args":{},"type":"function"},"reset":{"name":"reset()","doc":"Reset everything. All technologies are set to not researched, all modifiers are set to default values.","args":{},"type":"function"},"reset_technology_effects":{"name":"reset_technology_effects()","doc":"Reapplies all possible research effects, including unlocked recipes. Any custom chages are lost. Preserves research state of technologies.","args":{},"type":"function"},"chart":{"name":"chart(surface, area)","doc":"Chart a portion of the map. The chart for the given area is refreshed; it creates chart for","args":{"surface":{"doc":"surface :: SurfaceSpecification","name":"surface","type":"SurfaceSpecification"},"area":{"doc":"area :: BoundingBox:  The area on the given surface to chart.","name":"area","type":"BoundingBox"}},"type":"function"},"clear_chart":{"name":"clear_chart(surface)","doc":"Erases chart data for this force.","args":{"surface":{"doc":"surface :: SurfaceSpecification  (optional):  Which surface to erase chart data for or if not provided all surfaces charts are erased.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"rechart":{"name":"rechart()","doc":"Force a rechart of the whole chart.","args":{},"type":"function"},"chart_all":{"name":"chart_all(surface)","doc":"Chart all generated chunks.","args":{"surface":{"doc":"surface :: SurfaceSpecification  (optional):  Which surface to chart or all if not given.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"is_chunk_charted":{"name":"is_chunk_charted(surface, position) → boolean","doc":"Has a chunk been charted?   Parameterssurface :: SurfaceSpecificationposition :: ChunkPosition:  Position of the chunk.","returns":"boolean","args":{"surface":{"doc":"surface :: SurfaceSpecification","name":"surface","type":"SurfaceSpecification"},"position":{"doc":"position :: ChunkPosition:  Position of the chunk.","name":"position","type":"ChunkPosition"}},"type":"function"},"is_chunk_visible":{"name":"is_chunk_visible(surface, position) → boolean","doc":"Is the given chunk currently charted and visible (not covered by fogg of war) on the map.","returns":"boolean","args":{"surface":{"doc":"surface :: SurfaceSpecification","name":"surface","type":"SurfaceSpecification"},"position":{"doc":"position :: ChunkPosition","name":"position","type":"ChunkPosition"}},"type":"function"},"get_ammo_damage_modifier":{"name":"get_ammo_damage_modifier(ammo) → double","doc":"Parametersammo :: string:  Ammo category","returns":"double","args":{"ammo":{"doc":"ammo :: string:  Ammo category","name":"ammo","type":"string"}},"type":"function"},"set_ammo_damage_modifier":{"name":"set_ammo_damage_modifier(ammo, modifier)","doc":"Parametersammo :: string:  Ammo categorymodifier :: double","args":{"ammo":{"doc":"ammo :: string:  Ammo category","name":"ammo","type":"string"},"modifier":{"doc":"modifier :: double","name":"modifier","type":"double"}},"type":"function"},"get_gun_speed_modifier":{"name":"get_gun_speed_modifier(ammo) → double","doc":"Parametersammo :: string:  Ammo category","returns":"double","args":{"ammo":{"doc":"ammo :: string:  Ammo category","name":"ammo","type":"string"}},"type":"function"},"set_gun_speed_modifier":{"name":"set_gun_speed_modifier(ammo, modifier)","doc":"Parametersammo :: string:  Ammo categorymodifier :: double","args":{"ammo":{"doc":"ammo :: string:  Ammo category","name":"ammo","type":"string"},"modifier":{"doc":"modifier :: double","name":"modifier","type":"double"}},"type":"function"},"get_turret_attack_modifier":{"name":"get_turret_attack_modifier(turret) → double","doc":"Parametersturret :: string:  Turret prototype name","returns":"double","args":{"turret":{"doc":"turret :: string:  Turret prototype name","name":"turret","type":"string"}},"type":"function"},"set_turret_attack_modifier":{"name":"set_turret_attack_modifier(turret, modifier)","doc":"Parametersturret :: string:  Turret prototype namemodifier :: double","args":{"turret":{"doc":"turret :: string:  Turret prototype name","name":"turret","type":"string"},"modifier":{"doc":"modifier :: double","name":"modifier","type":"double"}},"type":"function"},"set_cease_fire":{"name":"set_cease_fire(other, cease_fire)","doc":"Stop attacking members of a given force.  Parametersother :: string or LuaForcecease_fire :: boolean:  When true, this force won't attack other; otherwise it will.","args":{"other":{"doc":"other :: string or LuaForce","name":"other","type":"string or LuaForce"},"cease_fire":{"doc":"cease_fire :: boolean:  When true, this force won't attack other; otherwise it will.","name":"cease_fire","type":"boolean"}},"type":"function"},"get_cease_fire":{"name":"get_cease_fire(other) → boolean","doc":"Will this force attack members of another force?  Parametersother :: string or LuaForce","returns":"boolean","args":{"other":{"doc":"other :: string or LuaForce","name":"other","type":"string or LuaForce"}},"type":"function"},"set_friend":{"name":"set_friend(other, cease_fire)","doc":"Friends have unrestricted access to buildings and turrets won't fire at them.  Parametersother :: string or LuaForcecease_fire :: boolean","args":{"other":{"doc":"other :: string or LuaForce","name":"other","type":"string or LuaForce"},"cease_fire":{"doc":"cease_fire :: boolean","name":"cease_fire","type":"boolean"}},"type":"function"},"get_friend":{"name":"get_friend(other) → boolean","doc":"Is this force a friend?  Parametersother :: string or LuaForce","returns":"boolean","args":{"other":{"doc":"other :: string or LuaForce","name":"other","type":"string or LuaForce"}},"type":"function"},"is_pathfinder_busy":{"name":"is_pathfinder_busy() → boolean","doc":"Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.","returns":"boolean","args":{},"type":"function"},"kill_all_units":{"name":"kill_all_units()","doc":"Kill all units and flush the pathfinder.","args":{},"type":"function"},"find_logistic_network_by_position":{"name":"find_logistic_network_by_position(position, surface) → LuaLogisticNetwork","doc":"Parametersposition :: Position:  Position to find a network forsurface :: SurfaceSpecification:  Surface to search onReturn value The found network or nil.","returns":"LuaLogisticNetwork","args":{"position":{"doc":"position :: Position:  Position to find a network for","name":"position","type":"Position"},"surface":{"doc":"surface :: SurfaceSpecification:  Surface to search on","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"set_spawn_position":{"name":"set_spawn_position(position, surface)","doc":"Parametersposition :: Position:  The new position on the given surface.surface :: SurfaceSpecification:  Surface to set the spawn position for.","args":{"position":{"doc":"position :: Position:  The new position on the given surface.","name":"position","type":"Position"},"surface":{"doc":"surface :: SurfaceSpecification:  Surface to set the spawn position for.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"get_spawn_position":{"name":"get_spawn_position(surface) → Position","doc":"Parameterssurface :: SurfaceSpecification","returns":"Position","args":{"surface":{"doc":"surface :: SurfaceSpecification","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"unchart_chunk":{"name":"unchart_chunk(position, surface)","doc":"Parametersposition :: ChunkPosition:  The chunk position to unchart.surface :: SurfaceSpecification:  Surface to unchart on.","args":{"position":{"doc":"position :: ChunkPosition:  The chunk position to unchart.","name":"position","type":"ChunkPosition"},"surface":{"doc":"surface :: SurfaceSpecification:  Surface to unchart on.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"get_item_launched":{"name":"get_item_launched(item) → uint","doc":"Gets the count of a given item launched in rockets.","returns":"uint","args":{"item":{"doc":"item :: string:  The item to get","name":"item","type":"string"}},"type":"function"},"set_item_launched":{"name":"set_item_launched(item, count)","doc":"Sets the count of a given item launched in rockets.","args":{"item":{"doc":"item :: string:  The item to set","name":"item","type":"string"},"count":{"doc":"count :: uint:  The count to set","name":"count","type":"uint"}},"type":"function"},"print":{"name":"print(message)","doc":"Print text to the chat console of all players on this force. Parametersmessage :: LocalisedString","args":{"message":{"doc":"message :: LocalisedString","name":"message","type":"LocalisedString"}},"type":"function"},"get_trains":{"name":"get_trains(surface) → array of LuaTrain","doc":"Parameterssurface :: SurfaceSpecification  (optional):  If given only trains on the surface are returned.","returns":"array of LuaTrain","args":{"surface":{"doc":"surface :: SurfaceSpecification  (optional):  If given only trains on the surface are returned.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"add_chart_tag":{"name":"add_chart_tag(surface, tag) → LuaCustomChartTag","doc":"Adds a custom chart tag to the given surface and returns the new tag or nil if the given position isn't valid for a chart tag.","returns":"LuaCustomChartTag","args":{"surface":{"doc":"surface :: SurfaceSpecification:  Which surface to add the tag to.","name":"surface","type":"SurfaceSpecification"},"tag":{"doc":"tag:  Table with the following fields: icon :: SignalID  (optional): )position :: Positiontext :: string  (optional)last_user :: PlayerSpecification  (optional)orientation :: float  (optional)target :: LuaEntity  (optional)","name":"tag","type":"SignalID"}},"type":"function"},"find_chart_tags":{"name":"find_chart_tags(surface, area) → array of LuaCustomChartTag","doc":"Finds all custom chart tags within the given bounding box on the given surface.","returns":"array of LuaCustomChartTag","args":{"surface":{"doc":"surface :: SurfaceSpecification","name":"surface","type":"SurfaceSpecification"},"area":{"doc":"area :: BoundingBox  (optional)","name":"area","type":"BoundingBox"}},"type":"function"},"name":{"name":"name","doc":"Name of the force. Example","type":"string","mode":"[Read-only]"},"technologies":{"name":"technologies","doc":"Technologies owned by this force, indexed by their name. Example","type":"custom dictionary string → LuaTechnology","mode":"[Read-only]"},"recipes":{"name":"recipes","doc":"Recipes available to this force, indexed by their name. Example","type":"custom dictionary string → LuaRecipe","mode":"[Read-only]"},"manual_mining_speed_modifier":{"name":"manual_mining_speed_modifier","doc":"Multiplier of the manual mining speed. Default value is 0.","type":"double","mode":"[Read-Write]"},"manual_crafting_speed_modifier":{"name":"manual_crafting_speed_modifier","doc":"Multiplier of the manual crafting speed. Default value is 0.","type":"double","mode":"[Read-Write]"},"laboratory_speed_modifier":{"name":"laboratory_speed_modifier","doc":"","type":"double","mode":"[Read-Write]"},"worker_robots_speed_modifier":{"name":"worker_robots_speed_modifier","doc":"","type":"double","mode":"[Read-Write]"},"worker_robots_storage_bonus":{"name":"worker_robots_storage_bonus","doc":"","type":"double","mode":"[Read-Write]"},"current_research":{"name":"current_research","doc":"The current research in progress. Reading this attribute gives a LuaTechnology of the","type":"LuaTechnology or string","mode":"[Read-Write]"},"research_progress":{"name":"research_progress","doc":"Progress of current research, as a number in range [0, 1].","type":"double","mode":"[Read-Write]"},"inserter_stack_size_bonus":{"name":"inserter_stack_size_bonus","doc":"The inserter stack size bonus for non stack inserters","type":"double","mode":"[Read-Write]"},"stack_inserter_capacity_bonus":{"name":"stack_inserter_capacity_bonus","doc":"Number of items that can be transferred by stack inserters","type":"uint","mode":"[Read-Write]"},"character_logistic_slot_count":{"name":"character_logistic_slot_count","doc":"Number of character logistic slots.","type":"double","mode":"[Read-Write]"},"character_trash_slot_count":{"name":"character_trash_slot_count","doc":"Number of character trash slots.","type":"double","mode":"[Read-Write]"},"quickbar_count":{"name":"quickbar_count","doc":"Number of character quick bars.","type":"uint","mode":"[Read-Write]"},"maximum_following_robot_count":{"name":"maximum_following_robot_count","doc":"Maximum number of follower robots.","type":"uint","mode":"[Read-Write]"},"ghost_time_to_live":{"name":"ghost_time_to_live","doc":"The time, in ticks, before a placed ghost disappears.","type":"uint","mode":"[Read-Write]"},"players":{"name":"players","doc":"Players belonging to this force.","type":"array of LuaPlayer","mode":"[Read-only]"},"ai_controllable":{"name":"ai_controllable","doc":"Enables some higher-level AI behaviour for this force. When set to true, biters belonging to","type":"boolean","mode":"[Read-Write]"},"logistic_networks":{"name":"logistic_networks","doc":"List of logistic networks, grouped by surface.","type":"dictionary string → array of LuaLogisticNetwork","mode":"[Read-only]"},"item_production_statistics":{"name":"item_production_statistics","doc":"The item production statistics for this force.","type":"LuaFlowStatistics","mode":"[Read-only]"},"fluid_production_statistics":{"name":"fluid_production_statistics","doc":"The fluid production statistics for this force.","type":"LuaFlowStatistics","mode":"[Read-only]"},"kill_count_statistics":{"name":"kill_count_statistics","doc":"The kill counter statistics for this force.","type":"LuaFlowStatistics","mode":"[Read-only]"},"entity_build_count_statistics":{"name":"entity_build_count_statistics","doc":"The entity build statistics for this force (built and mined)","type":"LuaFlowStatistics","mode":"[Read-only]"},"character_running_speed_modifier":{"name":"character_running_speed_modifier","doc":"","type":"uint","mode":"[Read-Write]"},"character_build_distance_bonus":{"name":"character_build_distance_bonus","doc":"","type":"uint","mode":"[Read-Write]"},"character_item_drop_distance_bonus":{"name":"character_item_drop_distance_bonus","doc":"","type":"uint","mode":"[Read-Write]"},"character_reach_distance_bonus":{"name":"character_reach_distance_bonus","doc":"","type":"uint","mode":"[Read-Write]"},"character_resource_reach_distance_bonus":{"name":"character_resource_reach_distance_bonus","doc":"","type":"double","mode":"[Read-Write]"},"character_item_pickup_distance_bonus":{"name":"character_item_pickup_distance_bonus","doc":"","type":"double","mode":"[Read-Write]"},"character_loot_pickup_distance_bonus":{"name":"character_loot_pickup_distance_bonus","doc":"","type":"double","mode":"[Read-Write]"},"character_inventory_slots_bonus":{"name":"character_inventory_slots_bonus","doc":"the number of additional inventory slots the character main inventory has.","type":"uint","mode":"[Read-Write]"},"deconstruction_time_to_live":{"name":"deconstruction_time_to_live","doc":"The time, in ticks, before a deconstruction order is removed.","type":"uint","mode":"[Read-Write]"},"character_health_bonus":{"name":"character_health_bonus","doc":"","type":"float","mode":"[Read-Write]"},"auto_character_trash_slots":{"name":"auto_character_trash_slots","doc":"true if auto character trash slots are enabled. Character trash slots must be > 0 as well for this to actually be used.","type":"boolean","mode":"[Read-Write]"},"zoom_to_world_enabled":{"name":"zoom_to_world_enabled","doc":"Ability to use zoom-to-world on map.","type":"boolean","mode":"[Read-Write]"},"zoom_to_world_ghost_building_enabled":{"name":"zoom_to_world_ghost_building_enabled","doc":"Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-world.","type":"boolean","mode":"[Read-Write]"},"zoom_to_world_blueprint_enabled":{"name":"zoom_to_world_blueprint_enabled","doc":"Ability to create new blueprints using empty blueprint item when using zoom-to-world.","type":"boolean","mode":"[Read-Write]"},"zoom_to_world_deconstruction_planner_enabled":{"name":"zoom_to_world_deconstruction_planner_enabled","doc":"Ability to use deconstruction planner when using zoom-to-world.","type":"boolean","mode":"[Read-Write]"},"zoom_to_world_selection_tool_enabled":{"name":"zoom_to_world_selection_tool_enabled","doc":"Ability to use custom selection tools when using zoom-to-world.","type":"boolean","mode":"[Read-Write]"},"rockets_launched":{"name":"rockets_launched","doc":"The number of rockets launched.","type":"uint","mode":"[Read-Write]"},"items_launched":{"name":"items_launched","doc":"All of the items that have been launched in rockets.","type":"dictionary string → uint","mode":"[Read-only]"},"connected_players":{"name":"connected_players","doc":"The connected players belonging to this force.","type":"array of LuaPlayer","mode":"[Read-only]"},"mining_drill_productivity_bonus":{"name":"mining_drill_productivity_bonus","doc":"","type":"double","mode":"[Read-Write]"},"train_braking_force_bonus":{"name":"train_braking_force_bonus","doc":"","type":"double","mode":"[Read-Write]"},"evolution_factor":{"name":"evolution_factor","doc":"Evolution factor of this force.","type":"float","mode":"[Read-Write]"},"friendly_fire":{"name":"friendly_fire","doc":"If friendly fire is enabled for this force.","type":"boolean","mode":"[Read-Write]"}}},"LuaFluidPrototype":{"name":"LuaFluidPrototype","type":"LuaFluidPrototype","doc":"Prototype of a fluid.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"default_temperature":{"name":"default_temperature","doc":"Default temperature of the fluid.","type":"double","mode":"[Read-only]"},"max_temperature":{"name":"max_temperature","doc":"Maximum temperature the fluid can reach.","type":"double","mode":"[Read-only]"},"heat_capacity":{"name":"heat_capacity","doc":"How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine.","type":"double","mode":"[Read-only]"},"pressure_to_speed_ratio":{"name":"pressure_to_speed_ratio","doc":"How much pressure -- difference in fluid levels -- will be converted to speed.","type":"double","mode":"[Read-only]"},"flow_to_energy_ratio":{"name":"flow_to_energy_ratio","doc":"How much will a volume of fluid transferred be converted to energy.","type":"double","mode":"[Read-only]"},"max_push_amount":{"name":"max_push_amount","doc":"","type":"double","mode":"[Read-only]"},"ratio_to_push":{"name":"ratio_to_push","doc":"","type":"double","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string for this prototype.","type":"string","mode":"[Read-only]"},"group":{"name":"group","doc":"Group of this prototype.","type":"LuaGroup","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"Subgroup of this prototype.","type":"LuaGroup","mode":"[Read-only]"},"base_color":{"name":"base_color","doc":"","type":"Color","mode":"[Read-only]"},"flow_color":{"name":"flow_color","doc":"","type":"Color","mode":"[Read-only]"}}},"LuaFluidBox":{"name":"LuaFluidBox","type":"LuaFluidBox","doc":"An array of fluid boxes. Entities may contain more than one fluid box, and some can change the number\n of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending\n on its active recipe.","properties":{"get_capacity":{"name":"get_capacity(index) → double","doc":"The capacity of the given fluidbox index.","returns":"double","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"}},"type":"function"},"get_connections":{"name":"get_connections() → array of LuaFluidBox","doc":"The fluidbox connections for the given fluidbox index.","returns":"array of LuaFluidBox","args":{},"type":"function"},"operator #":{"name":"operator #","doc":"Number of fluid boxes.","type":"uint","mode":"[Read-only]"},"owner":{"name":"owner","doc":"The entity that owns this fluidbox.","type":"LuaEntity","mode":"[Read-only]"},"operator []":{"name":"operator []","doc":"Access, set or clear a fluid box. The index must always be in bounds (see LuaFluidBox::operator #);","mode":"[Read-only]","type":"operator []"}}},"LuaFlowStatistics":{"name":"LuaFlowStatistics","type":"LuaFlowStatistics","doc":"Encapsulates statistic data for different parts of the game.","properties":{"get_input_count":{"name":"get_input_count(string)","doc":"Gets the total input count for a given prototype. Parametersstring:  The prototype name.","args":{"string":{"doc":"string:  The prototype name.","name":"string"}},"type":"function"},"set_input_count":{"name":"set_input_count(string, count)","doc":"Sets the total input count for a given prototype.  Parametersstring:  The prototype name.count :: uint64 or double:  The new count. The type depends on the instance of the statistics.","args":{"string":{"doc":"string:  The prototype name.","name":"string"},"count":{"doc":"count :: uint64 or double:  The new count. The type depends on the instance of the statistics.","name":"count","type":"uint64 or double"}},"type":"function"},"get_output_count":{"name":"get_output_count(string)","doc":"Gets the total output count for a given prototype. Parametersstring:  The prototype name.","args":{"string":{"doc":"string:  The prototype name.","name":"string"}},"type":"function"},"set_output_count":{"name":"set_output_count(string, count)","doc":"Sets the total output count for a given prototype.  Parametersstring:  The prototype name.count :: uint64 or double:  The new count. The type depends on the instance of the statistics.","args":{"string":{"doc":"string:  The prototype name.","name":"string"},"count":{"doc":"count :: uint64 or double:  The new count. The type depends on the instance of the statistics.","name":"count","type":"uint64 or double"}},"type":"function"},"input_counts":{"name":"input_counts","doc":"List of input counts indexed by name <> value.","type":"dictionary string → array of uint64 or double","mode":"[Read-only]"},"output_counts":{"name":"output_counts","doc":"List of output counts indexed by name <> value.","type":"dictionary string → array of uint64 or double","mode":"[Read-only]"},"force":{"name":"force","doc":"The force these statistics belong to.","type":"LuaForce","mode":"[Read-only]"}}},"LuaEquipmentPrototype":{"name":"LuaEquipmentPrototype","type":"LuaEquipmentPrototype","doc":"Prototype of a modular equipment.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"type":{"name":"type","doc":"Type of this equipment prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"shape":{"name":"shape","doc":"Shape of this equipment prototype. It is a table: width :: uintheight :: uint","mode":"[Read-only]","type":"shape"},"take_result":{"name":"take_result","doc":"The result item when taking this equipment out of an equipment grid. nil if there is no result item.","type":"LuaItemPrototype","mode":"[Read-only]"},"energy_production":{"name":"energy_production","doc":"The max power generated by this equipment.","type":"double","mode":"[Read-only]"},"shield":{"name":"shield","doc":"The shield value of this equipment. 0 for non-shield equipment.","type":"float","mode":"[Read-only]"},"energy_per_shield":{"name":"energy_per_shield","doc":"The energy per shield point restored. 0 for non-shield equipment.","type":"double","mode":"[Read-only]"},"logistic_parameters":{"name":"logistic_parameters","doc":"The logistic parameters for roboport equipment","mode":"[Read-only]","type":"logistic_parameters"},"energy_consumption":{"name":"energy_consumption","doc":"","type":"double","mode":"[Read-only]"},"movement_bonus":{"name":"movement_bonus","doc":"Can only be used if this is MovementBonusEquipmentPrototype","type":"float","mode":"[Read-only]"},"night_vision_tint":{"name":"night_vision_tint","doc":"Can only be used if this is NightVisionEquipmentPrototype","type":"Color","mode":"[Read-only]"},"energy_source":{"name":"energy_source","doc":"The energy source prototype for the equipment.","mode":"[Read-only]","type":"energy_source"},"equipment_categories":{"name":"equipment_categories","doc":"Category names for this equipment. These categories will be used to determine whether this equpiment is allowed","type":"array of string","mode":"[Read-only]"}}},"LuaEquipmentGridPrototype":{"name":"LuaEquipmentGridPrototype","type":"LuaEquipmentGridPrototype","doc":"Prototype of a virtual signal.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"equipment_categories":{"name":"equipment_categories","doc":"Equipment category names for the categories that may be inserted into this equipment grid. The grid will accept","type":"array of string","mode":"[Read-only]"},"width":{"name":"width","doc":"","type":"uint","mode":"[Read-only]"},"height":{"name":"height","doc":"","type":"uint","mode":"[Read-only]"}}},"LuaEquipmentGrid":{"name":"LuaEquipmentGrid","type":"LuaEquipmentGrid","doc":"An equipment grid is the inside of a power armour.","properties":{"take":{"name":"take{position=…, equipment=…} → SimpleItemStack","doc":"Remove an equipment from the grid.","returns":"SimpleItemStack","args":{"position":{"doc":"Table with the following fields: position :: Position  (optional):  Take the equipment that contains this position in the grid.equipment :: LuaEquipment  (optional):  Take this exact equipment. Either position or equipment must be specified.","name":"position","type":"Position"},"position=…":{"name":"position=…","type":"position=…"},"equipment=…":{"name":"equipment=…","type":"equipment=…"}},"type":"function"},"take_all":{"name":"take_all() → dictionary string → uint","doc":"Remove all equipment from the grid. Return value Count of each removed equipment, indexed by their prototype names.","returns":"dictionary string → uint","args":{},"type":"function"},"clear":{"name":"clear()","doc":"Clear all equipment from the grid. I.e. remove it without actually returning it.","args":{},"type":"function"},"put":{"name":"put{name=…, position=…} → LuaEquipment","doc":"Insert an equipment into the grid.","returns":"LuaEquipment","args":{"name":{"doc":"Table with the following fields: name :: string:  Equipment prototype nameposition :: Position  (optional):  Grid position to put the equipment in.","name":"name","type":"string"},"name=…":{"name":"name=…","type":"name=…"},"position=…":{"name":"position=…","type":"position=…"}},"type":"function"},"can_move":{"name":"can_move{equipment=…, position=…} → boolean","doc":"Check whether moving an equipment would succeed.","returns":"boolean","args":{"equipment":{"doc":"Table with the following fields: equipment :: LuaEquipment:  The equipment to moveposition :: Position:  Where to put it","name":"equipment","type":"LuaEquipment"},"equipment=…":{"name":"equipment=…","type":"equipment=…"},"position=…":{"name":"position=…","type":"position=…"}},"type":"function"},"move":{"name":"move{equipment=…, position=…} → boolean","doc":"Move an equipment within this grid.","returns":"boolean","args":{"equipment":{"doc":"Table with the following fields: equipment :: LuaEquipment:  The equipment to moveposition :: Position:  Where to put it","name":"equipment","type":"LuaEquipment"},"equipment=…":{"name":"equipment=…","type":"equipment=…"},"position=…":{"name":"position=…","type":"position=…"}},"type":"function"},"get":{"name":"get(position) → LuaEquipment","doc":"Find equipment in the Equipment Grid based off a position.","returns":"LuaEquipment","args":{"position":{"doc":"position :: Position:  The position","name":"position","type":"Position"}},"type":"function"},"get_contents":{"name":"get_contents() → dictionary string → uint","doc":"Get counts of all equipment in this grid. Return value The counts, indexed by equipment names.","returns":"dictionary string → uint","args":{},"type":"function"},"prototype":{"name":"prototype","doc":"","type":"LuaEquipmentGridPrototype","mode":"[Read-only]"},"width":{"name":"width","doc":"Width of the equipment grid.","type":"uint","mode":"[Read-only]"},"height":{"name":"height","doc":"Height of the equipment grid.","type":"uint","mode":"[Read-only]"},"equipment":{"name":"equipment","doc":"All the equipment in this grid.","type":"array of LuaEquipment","mode":"[Read-only]"},"generator_energy":{"name":"generator_energy","doc":"Total energy per tick generated by the equipment inside this grid.","type":"double","mode":"[Read-only]"},"max_solar_energy":{"name":"max_solar_energy","doc":"Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated","type":"double","mode":"[Read-only]"},"available_in_batteries":{"name":"available_in_batteries","doc":"The total energy stored in all batteries in the equipment grid.","type":"double","mode":"[Read-only]"},"battery_capacity":{"name":"battery_capacity","doc":"Total energy storage capacity of all batteries in the equipment grid.","type":"double","mode":"[Read-only]"},"shield":{"name":"shield","doc":"The amount of shields this equipment grid has.","type":"float","mode":"[Read-only]"},"max_shield":{"name":"max_shield","doc":"The maximum amount of shields this equipment grid has.","type":"float","mode":"[Read-only]"}}},"LuaEquipment":{"name":"LuaEquipment","type":"LuaEquipment","doc":"An item in one's power armour.","properties":{"name":{"name":"name","doc":"Name of this equipment.","type":"string","mode":"[Read-only]"},"type":{"name":"type","doc":"Type of this equipment.","type":"string","mode":"[Read-only]"},"position":{"name":"position","doc":"Position of this equipment in the equipment grid.","type":"Position","mode":"[Read-only]"},"shape":{"name":"shape","doc":"Shape of this equipment. It is a table: width :: uintheight :: uint","mode":"[Read-only]","type":"shape"},"shield":{"name":"shield","doc":"Current shield value of the equipment.","type":"double","mode":"[Read-Write]"},"max_shield":{"name":"max_shield","doc":"Maximum shield value.","type":"double","mode":"[Read-only]"},"max_solar_power":{"name":"max_solar_power","doc":"Maximum solar power generated.","type":"double","mode":"[Read-only]"},"movement_bonus":{"name":"movement_bonus","doc":"Movement speed bonus.","type":"double","mode":"[Read-only]"},"generator_power":{"name":"generator_power","doc":"Energy generated per tick.","type":"double","mode":"[Read-only]"},"energy":{"name":"energy","doc":"Current available energy.","type":"double","mode":"[Read-Write]"},"max_energy":{"name":"max_energy","doc":"Maximum amount of energy that can be stored in this equipment.","type":"double","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"","type":"LuaEquipmentPrototype","mode":"[Read-only]"}}},"LuaEntityPrototype":{"name":"LuaEntityPrototype","type":"LuaEntityPrototype","doc":"Prototype of an entity.","properties":{"has_flag":{"name":"has_flag(flag) → boolean","doc":"Does this prototype have a flag enabled?","returns":"boolean","args":{"flag":{"doc":"flag :: string:  The flag to check. Must be one of  \"pushable\" \"placeable-neutral\" \"placeable-player\" \"placeable-enemy\" \"placeable-off-grid\" \"player-creation\" \"building-direction-8-way\" \"filter-directions\" \"fast-replaceable-no-build-while-moving\" \"breaths-air\" \"not-repairable\" \"not-on-map\" \"not-blueprintable\" \"not-deconstructable\"","name":"flag","type":"string"}},"type":"function"},"get_inventory_size":{"name":"get_inventory_size(index) → uint","doc":"Gets the base size of the given inventory on this entity or nil if the given inventory doesn't exist.","returns":"uint","args":{"index":{"doc":"index :: uint","name":"index","type":"uint"}},"type":"function"},"type":{"name":"type","doc":"Type of this prototype.","type":"string","mode":"[Read-only]"},"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"max_health":{"name":"max_health","doc":"Max health of this entity. Will be 0 if this is not an entity with health.","type":"float","mode":"[Read-only]"},"infinite_resource":{"name":"infinite_resource","doc":"Is this resource infinite? Will be nil when used on a non-resource.","type":"boolean","mode":"[Read-only]"},"minimum_resource_amount":{"name":"minimum_resource_amount","doc":"Minimum amount of this resource. Will be nil when used on a non-resource.","type":"uint","mode":"[Read-only]"},"resource_category":{"name":"resource_category","doc":"Category of this resource. \"basic-solid\", \"basic-fluid\" or nil (when not a resource).","type":"string","mode":"[Read-only]"},"mineable_properties":{"name":"mineable_properties","doc":"Table with the following fields: minable :: boolean:  Is this entity mineable at all?hardness :: double:  Mining hardness.miningtime :: double:  Energy required to mine an entity.miningparticle :: string  (optional):  Prototype name of the particle produced when mining this entity.","mode":"[Read-only]","type":"mineable_properties"},"items_to_place_this":{"name":"items_to_place_this","doc":"Items that when placed will produce this entity. It is a dictionary indexed by the item prototype name.","type":"dictionary string → LuaItemPrototype","mode":"[Read-only]"},"collision_box":{"name":"collision_box","doc":"The bounding box used for collision checking.","type":"BoundingBox","mode":"[Read-only]"},"selection_box":{"name":"selection_box","doc":"The bounding box used for drawing selection.","type":"BoundingBox","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"group":{"name":"group","doc":"Group of this entity.","type":"LuaGroup","mode":"[Read-only]"},"subgroup":{"name":"subgroup","doc":"Subgroup of this entity.","type":"LuaGroup","mode":"[Read-only]"},"healing_per_tick":{"name":"healing_per_tick","doc":"Amount this entity can heal per tick.","type":"uint","mode":"[Read-only]"},"emissions_per_tick":{"name":"emissions_per_tick","doc":"Amount of pollution emissions per tick this entity will create.","type":"double","mode":"[Read-only]"},"corpses":{"name":"corpses","doc":"Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype","type":"dictionary string → LuaEntityPrototype","mode":"[Read-only]"},"selectable_in_game":{"name":"selectable_in_game","doc":"Is this entity selectable?","type":"boolean","mode":"[Read-only]"},"weight":{"name":"weight","doc":"","type":"uint","mode":"[Read-only]"},"resistances":{"name":"resistances","doc":"","type":"Resistances","mode":"[Read-only]"},"fast_replaceable_group":{"name":"fast_replaceable_group","doc":"The group of mutually fast-replaceable entities. Possibly nil.","type":"string","mode":"[Read-only]"},"loot":{"name":"loot","doc":"Loot that will be dropped when this entity is killed. nil if there is no loot.","type":"Loot","mode":"[Read-only]"},"repair_speed_modifier":{"name":"repair_speed_modifier","doc":"Repair-speed modifier for this entity. Actual repair speed will be","type":"uint","mode":"[Read-only]"},"turret_range":{"name":"turret_range","doc":"","type":"uint","mode":"[Read-only]"},"autoplace_specification":{"name":"autoplace_specification","doc":"Autoplace specification for this entity prototype. nil if none.","type":"AutoplaceSpecification","mode":"[Read-only]"},"collision_mask":{"name":"collision_mask","doc":"The collison masks this entity uses","type":"array of string","mode":"[Read-only]"},"belt_speed":{"name":"belt_speed","doc":"The speed of this transport belt or nil if this isn't a transport belt related prototype.","type":"double","mode":"[Read-only]"},"result_units":{"name":"result_units","doc":"The result units and spawn points with weight and evolution factor for a biter spawner entity. Each UnitSpawnDefinition is a table: unit :: string:  Prototype name of the unit that would be spawnedspawn_points :: array of SpawnPoint:  Each SpawnPoint is a table: evolution_factor :: double:  Evolution factor for which this weight applies.weight :: double:  Probability of spawning this unit at this evolution factor.","type":"array of UnitSpawnDefinition","mode":"[Read-only]"},"attack_result":{"name":"attack_result","doc":"The attack result of this entity if the entity has one else nil.","mode":"[Read-only]","type":"attack_result"},"final_attack_result":{"name":"final_attack_result","doc":"The final attack result for projectiles nil if not a projectile","mode":"[Read-only]","type":"final_attack_result"},"spawn_cooldown":{"name":"spawn_cooldown","doc":"The spawning cooldown for this enemy spawner prototype or nil.","mode":"[Read-only]","type":"spawn_cooldown"},"mining_drill_radius":{"name":"mining_drill_radius","doc":"The mining radius of this mining drill prototype or nil if this isn't a mining drill prototype.","type":"double","mode":"[Read-only]"},"logistic_mode":{"name":"logistic_mode","doc":"The logistic mode of this logistic container or nil if this isn't a logistic container prototype.","type":"string","mode":"[Read-only]"},"max_underground_distance":{"name":"max_underground_distance","doc":"The max underground distance for underground belts and underground pipes or nil if this isn't one of those prototypes.","type":"uint","mode":"[Read-only]"},"drawing_box":{"name":"drawing_box","doc":"The bounding box used for drawing the entity icon.","type":"BoundingBox","mode":"[Read-only]"},"sticker_box":{"name":"sticker_box","doc":"The bounding box used to attach sticker type entities.","type":"BoundingBox","mode":"[Read-only]"},"flags":{"name":"flags","doc":"The entity prototype flags for this entitiy.","type":"array of string","mode":"[Read-only]"},"remains_when_mined":{"name":"remains_when_mined","doc":"The remains left behind when this entity is mined.","type":"array of LuaEntityPrototype","mode":"[Read-only]"},"additional_pastable_entities":{"name":"additional_pastable_entities","doc":"Entities this entity can be pasted onto in addition to the normal allowed ones.","type":"array of LuaEntityPrototype","mode":"[Read-only]"},"allow_copy_paste":{"name":"allow_copy_paste","doc":"When false copy-paste is not allowed for this entity.","type":"boolean","mode":"[Read-only]"},"shooting_cursor_size":{"name":"shooting_cursor_size","doc":"The cursor size used when shooting at this entity.","type":"double","mode":"[Read-only]"},"created_smoke":{"name":"created_smoke","doc":"The smoke trigger run when this entity is built or nil.","mode":"[Read-only]","type":"created_smoke"},"created_effect":{"name":"created_effect","doc":"The trigger run when this entity is created or nil.","mode":"[Read-only]","type":"created_effect"},"map_color":{"name":"map_color","doc":"The map color used when charting this entity if a friendly or enemy color isn't defined or nil.","type":"Color","mode":"[Read-only]"},"friendly_map_color":{"name":"friendly_map_color","doc":"The friendly map color used when charting this entity.","type":"Color","mode":"[Read-only]"},"enemy_map_color":{"name":"enemy_map_color","doc":"The enemy map color used when charting this entity.","type":"Color","mode":"[Read-only]"},"build_base_evolution_requirement":{"name":"build_base_evolution_requirement","doc":"The evolution requirement to build this entity as a base when expanding enemy bases.","type":"double","mode":"[Read-only]"},"instruments":{"name":"instruments","doc":"The instruments for this programmable speaker or nil.","type":"array of ProgrammableSpeakerInstrument","mode":"[Read-only]"},"max_polyphony":{"name":"max_polyphony","doc":"The maximum polyphony for this programmable speaker or nil.","type":"uint","mode":"[Read-only]"},"module_inventory_size":{"name":"module_inventory_size","doc":"The module inventory size or nil if this entity doesn't suport modules.","type":"uint","mode":"[Read-only]"},"ingredient_count":{"name":"ingredient_count","doc":"The max number of ingredients this crafting-machine prototype supports or nil if this isn't a crafting-machine prototype.","type":"uint","mode":"[Read-only]"},"crafting_speed":{"name":"crafting_speed","doc":"The crafting speed of this crafting-machine prototype or nil if this isn't a crafting-machine prototype.","type":"double","mode":"[Read-only]"}}},"LuaEntity":{"name":"LuaEntity","type":"LuaEntity","doc":"The primary interface for interacting with entities through the Lua API.\n Entity is everything on the map except tiles.","properties":{"get_output_inventory":{"name":"get_output_inventory() → LuaInventory","doc":"Gets the entities output inventory if it has one.","returns":"LuaInventory","args":{},"type":"function"},"get_module_inventory":{"name":"get_module_inventory() → LuaInventory","doc":"Return value Inventory for storing modules of this entity; nil if this entity has","returns":"LuaInventory","args":{},"type":"function"},"get_fuel_inventory":{"name":"get_fuel_inventory() → LuaInventory","doc":"The fuel inventory for this entity or nil if this entity doesn't have a fuel inventory.","returns":"LuaInventory","args":{},"type":"function"},"damage":{"name":"damage(damage, force, type) → float","doc":"Damages the entity.","returns":"float","args":{"damage":{"doc":"damage :: float:  The amount of damage to be done","name":"damage","type":"float"},"force":{"doc":"force :: string or LuaForce:  The force that will be doing the damage.","name":"force","type":"string or LuaForce"},"type":{"doc":"type :: string  (optional):  The type of damage to be done.","name":"type","type":"string"}},"type":"function"},"destroy":{"name":"destroy() → boolean","doc":"Destroys the entity.","returns":"boolean","args":{},"type":"function"},"set_command":{"name":"set_command(command)","doc":"Give the entity a command.","args":{"command":{"doc":"command :: Command","name":"command","type":"Command"}},"type":"function"},"has_command":{"name":"has_command() → boolean","doc":"Has this unit been assigned a command?","returns":"boolean","args":{},"type":"function"},"die":{"name":"die()","doc":"Immediately kills the entity. Doesn't attribute the kill to any force. Doesn't care","args":{},"type":"function"},"has_flag":{"name":"has_flag(flag) → boolean","doc":"Test whether this entity's prototype has a flag set.","returns":"boolean","args":{"flag":{"doc":"flag :: string:  The flag to test","name":"flag","type":"string"}},"type":"function"},"add_market_item":{"name":"add_market_item{price=…, offer=…}","doc":"Offer a thing on the market.","args":{"price":{"doc":"Table with the following fields: price:  list of prices, every element is 2 item table, first is the item name, the second is count.offer :: Modifier:  The action that will take place when a player accepts the offer. Usuallly a\n     \"give-item\" modifier.","name":"price","type":"Modifier"},"price=…":{"name":"price=…","type":"price=…"},"offer=…":{"name":"offer=…","type":"offer=…"}},"type":"function"},"remove_market_item":{"name":"remove_market_item(offer) → boolean","doc":"Remove an offer from a market.","returns":"boolean","args":{"offer":{"doc":"offer :: uint:  Index of offer to remove.","name":"offer","type":"uint"}},"type":"function"},"get_market_items":{"name":"get_market_items() → array of Offer","doc":"Get all offers in a market as an array.","returns":"array of Offer","args":{},"type":"function"},"connect_neighbour":{"name":"connect_neighbour(target)","doc":"Connect two devices with wire or cable. Parameterstarget :: LuaEntity or table:","args":{"target":{"doc":"target :: LuaEntity or table: \n    To connect two electric poles, target has to be a LuaEntity specifying another\n           electric pole. This will connect them with copper cable. To connect two devices with wire, this parameter is a table:\n       wire :: defines.wire_type:  Wire colour, either defines.wire_type.red or\n           defines.wire_type.green.target_entity :: LuaEntity:  The entity to connect the wire tosource_circuit_id :: uint  (optional):  Mandatory if the source entity has more than one\n           circuit connector.target_circuit_id :: uint  (optional):  Mandatory if the target entity has more than one\n           circuit connector.","name":"target","type":"LuaEntity or table"}},"type":"function"},"disconnect_neighbour":{"name":"disconnect_neighbour(target)","doc":"Disconnect wires or cables. Parameterstarget :: defines.wire_type or LuaEntity or table  (optional):","args":{"target":{"doc":"target :: defines.wire_type or LuaEntity or table  (optional): \n    To remove all copper cables, leave this parameter out: pole.disconnect_neighbour() To remove all wires of a specific colour, pass defines.wire_type.red or\n           defines.wire_type.green. To remove a specific copper cable between two poles, target can be a LuaEntity\n           specifying the other pole. E.g. pole1.disconnect_neighbour(pole2). To remove a specific red or green wire, pass a table in the same format as for\n           LuaEntity::connect_neighbour:\n           wire :: defines.wire_type:  Wire colourtarget_entity :: LuaEntitysource_circuit_id :: uint  (optional)target_circuit_id :: uint  (optional)","name":"target","type":"defines.wire_type or LuaEntity or table"}},"type":"function"},"order_deconstruction":{"name":"order_deconstruction(force) → boolean","doc":"Sets the entity to be deconstructed by construction robots.","returns":"boolean","args":{"force":{"doc":"force :: string or LuaForce:  The force whose robots are supposed to do the deconstruction.","name":"force","type":"string or LuaForce"}},"type":"function"},"cancel_deconstruction":{"name":"cancel_deconstruction(force)","doc":"Cancels deconstruction if it is scheduled, does nothing otherwise.","args":{"force":{"doc":"force :: string or LuaForce:  The force who did the deconstruction order.","name":"force","type":"string or LuaForce"}},"type":"function"},"to_be_deconstructed":{"name":"to_be_deconstructed(force) → boolean","doc":"Is this entity marked for deconstruction?","returns":"boolean","args":{"force":{"doc":"force :: string or LuaForce:  The force which ordered the deconstruction. This parameter is\n   is currently unused; it exists only for forward compatibility of the API.","name":"force","type":"string or LuaForce"}},"type":"function"},"get_request_slot":{"name":"get_request_slot(slot) → SimpleItemStack","doc":"Get a logistic requester slot.   Parametersslot :: uint:  The slot index.Return value Contents of the specified slot; nil if the given slot contains no request.Note:  Useable only on entities that have requester slots.","returns":"SimpleItemStack","args":{"slot":{"doc":"slot :: uint:  The slot index.","name":"slot","type":"uint"}},"type":"function"},"set_request_slot":{"name":"set_request_slot(request, slot)","doc":"Set a logistic requester slot.   Parametersrequest :: SimpleItemStack:  What to request.slot :: uint:  The slot index.Note:  Useable only on entities that have requester slots.","args":{"request":{"doc":"request :: SimpleItemStack:  What to request.","name":"request","type":"SimpleItemStack"},"slot":{"doc":"slot :: uint:  The slot index.","name":"slot","type":"uint"}},"type":"function"},"clear_request_slot":{"name":"clear_request_slot(slot)","doc":"Clear a logistic requester slot.  Parametersslot :: uint:  The slot index.Note:  Useable only on entities that have requester slots.","args":{"slot":{"doc":"slot :: uint:  The slot index.","name":"slot","type":"uint"}},"type":"function"},"is_crafting":{"name":"is_crafting() → boolean","doc":"Return value true if this machine is currently crafting.Can only be used if this is CraftingMachine","returns":"boolean","args":{},"type":"function"},"is_opened":{"name":"is_opened() → boolean","doc":"Return value true if this gate is currently opened.Can only be used if this is Gate","returns":"boolean","args":{},"type":"function"},"is_opening":{"name":"is_opening() → boolean","doc":"Return value true if this gate is currently opening.Can only be used if this is Gate","returns":"boolean","args":{},"type":"function"},"is_closed":{"name":"is_closed() → boolean","doc":"Return value true if this gate is currently closed.Can only be used if this is Gate","returns":"boolean","args":{},"type":"function"},"is_closing":{"name":"is_closing() → boolean","doc":"Return value true if this gate is currently closingCan only be used if this is Gate","returns":"boolean","args":{},"type":"function"},"request_to_open":{"name":"request_to_open(force, extra_time)","doc":"Parametersforce :: string or LuaForce:  The force that requests the gate to be open.extra_time :: uint  (optional):  Extra ticks to stay open.Can only be used if this is Gate","args":{"force":{"doc":"force :: string or LuaForce:  The force that requests the gate to be open.","name":"force","type":"string or LuaForce"},"extra_time":{"doc":"extra_time :: uint  (optional):  Extra ticks to stay open.","name":"extra_time","type":"uint"}},"type":"function"},"request_to_close":{"name":"request_to_close(force)","doc":"Parametersforce :: string or LuaForce:  The force that requests the gate to be closed.Can only be used if this is Gate","args":{"force":{"doc":"force :: string or LuaForce:  The force that requests the gate to be closed.","name":"force","type":"string or LuaForce"}},"type":"function"},"get_transport_line":{"name":"get_transport_line(index) → LuaTransportLine","doc":"Get a transport line of a belt.   Parametersindex :: uint:  Index of the requested transport line.Can only be used if this is TransportBeltConnectable","returns":"LuaTransportLine","args":{"index":{"doc":"index :: uint:  Index of the requested transport line.","name":"index","type":"uint"}},"type":"function"},"launch_rocket":{"name":"launch_rocket() → boolean","doc":"Return value true if the rocket was successfully launched. Return value of false","returns":"boolean","args":{},"type":"function"},"revive":{"name":"revive(return_item_request_proxy) → dictionary string → uint","doc":"Revive a ghost. I.e. turn it from a ghost to a real entity or tile.   Parametersreturn_item_request_proxy :: boolean  (optional):  If true the function will return item request proxy as the third parameter.Return value Any items the new real entity collided with or nil if the ghost could not be revived.Note:  If this is an entity ghost and it is successfully revived this will also return the revived entity or nil as a second return value","returns":"dictionary string → uint","args":{"return_item_request_proxy":{"doc":"return_item_request_proxy :: boolean  (optional):  If true the function will return item request proxy as the third parameter.","name":"return_item_request_proxy","type":"boolean"}},"type":"function"},"get_connected_rail":{"name":"get_connected_rail{rail_direction=…, rail_connection_direction=…} → LuaEntity","doc":"Parameters Table with the following fields: rail_direction :: defines.rail_directionrail_connection_direction :: defines.rail_connection_directionReturn value Rail connected in the specified manner to this one.Can only be used if this is Rail","returns":"LuaEntity","args":{"rail_direction":{"doc":"Table with the following fields: rail_direction :: defines.rail_directionrail_connection_direction :: defines.rail_connection_direction","name":"rail_direction","type":"defines.rail_direction"},"rail_direction=…":{"name":"rail_direction=…","type":"rail_direction=…"},"rail_connection_direction=…":{"name":"rail_connection_direction=…","type":"rail_connection_direction=…"}},"type":"function"},"get_filter":{"name":"get_filter(uint) → string","doc":"Get the filter for a slot in an inserter or a loader.   Parametersuint:  Slot to get the filter of.Return value Prototype name of the entity being filtered; nil if the given slot","returns":"string","args":{"uint":{"doc":"uint:  Slot to get the filter of.","name":"uint"}},"type":"function"},"set_filter":{"name":"set_filter(uint, string)","doc":"Set the filter for a slot in an inserter or a loader   Parametersuint:  Slot to set the filter of.string:  Prototype name of the entity to filter.Note:  The inserter/loader must allow filters.","args":{"uint":{"doc":"uint:  Slot to set the filter of.","name":"uint"},"string":{"doc":"string:  Prototype name of the entity to filter.","name":"string"}},"type":"function"},"get_control_behavior":{"name":"get_control_behavior() → LuaControlBehavior","doc":"Gets the control behavior of the entity (if any). Return value The control behavior or nil.","returns":"LuaControlBehavior","args":{},"type":"function"},"get_or_create_control_behavior":{"name":"get_or_create_control_behavior() → LuaControlBehavior","doc":"Gets (and or creates if needed) the control behavior of the entity. Return value The control behavior or nil.","returns":"LuaControlBehavior","args":{},"type":"function"},"get_circuit_network":{"name":"get_circuit_network(wire, circuit_connector) → LuaCircuitNetwork","doc":"Parameterswire :: defines.wire_type:  Wire colour of the network connected to this entity.circuit_connector :: defines.circuit_connector_id  (optional):  The connector to get circuit network for.","returns":"LuaCircuitNetwork","args":{"wire":{"doc":"wire :: defines.wire_type:  Wire colour of the network connected to this entity.","name":"wire","type":"defines.wire_type"},"circuit_connector":{"doc":"circuit_connector :: defines.circuit_connector_id  (optional):  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.","name":"circuit_connector","type":"defines.circuit_connector_id"}},"type":"function"},"supports_backer_name":{"name":"supports_backer_name() → boolean","doc":"Return value true if this entity supports a backer name.","returns":"boolean","args":{},"type":"function"},"copy_settings":{"name":"copy_settings(entity) → dictionary string → uint","doc":"Copies settings from the given entity onto this entity.","returns":"dictionary string → uint","args":{"entity":{"doc":"entity :: LuaEntity","name":"entity","type":"LuaEntity"}},"type":"function"},"get_logistic_point":{"name":"get_logistic_point(defines.logistic_member_index) → LuaLogisticPoint or array of LuaLogisticPoint","doc":"Gets the LuaLogisticPoint specified by the given index or if not given returns all of the points this entity owns.","returns":"LuaLogisticPoint or array of LuaLogisticPoint","args":{"defines.logistic_member_index":{"doc":"defines.logistic_member_index (optional)","name":"defines.logistic_member_index"}},"type":"function"},"play_note":{"name":"play_note(instrument, note) → boolean","doc":"Plays a note with the given instrument and note.","returns":"boolean","args":{"instrument":{"doc":"instrument :: uint","name":"instrument","type":"uint"},"note":{"doc":"note :: uint","name":"note","type":"uint"}},"type":"function"},"connect_rolling_stock":{"name":"connect_rolling_stock(direction) → boolean","doc":"Connects the rolling stock in the given direction.","returns":"boolean","args":{"direction":{"doc":"direction :: defines.rail_direction","name":"direction","type":"defines.rail_direction"}},"type":"function"},"disconnect_rolling_stock":{"name":"disconnect_rolling_stock(direction) → boolean","doc":"Tries to disconnect this rolling stock in the given direciton.","returns":"boolean","args":{"direction":{"doc":"direction :: defines.rail_direction","name":"direction","type":"defines.rail_direction"}},"type":"function"},"passenger":{"name":"passenger","doc":"Setting to nil forces the character/player out of the vehicle, setting to a new character/player","type":"LuaEntity or LuaPlayer","mode":"[Read-Write]"},"name":{"name":"name","doc":"Name of the entity prototype. E.g. \"inserter\" or \"filter-inserter\".","type":"string","mode":"[Read-only]"},"ghost_name":{"name":"ghost_name","doc":"Name of the entity or tile contained in this ghost","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"Localised name of the entity.","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"ghost_localised_name":{"name":"ghost_localised_name","doc":"Localised name of the entity or tile contained in this ghost.","type":"LocalisedString","mode":"[Read-only]"},"ghost_localised_description":{"name":"ghost_localised_description","doc":"Can only be used if this is Ghost","type":"LocalisedString","mode":"[Read-only]"},"type":{"name":"type","doc":"The entity prototype type of this entity.","type":"string","mode":"[Read-only]"},"ghost_type":{"name":"ghost_type","doc":"The prototype type of the entity or tile contained in this ghost.","type":"string","mode":"[Read-only]"},"active":{"name":"active","doc":"Deactivating an entity will stop all its operations (car will stop moving, inserters","type":"boolean","mode":"[Read-Write]"},"destructible":{"name":"destructible","doc":"When the entity is not destructible it can't be damaged.","type":"boolean","mode":"[Read-Write]"},"minable":{"name":"minable","doc":"Note:  Not minable entities can still be destroyed.Note:  Entities that are not minable naturally (like smoke, player, enemy units etc)","type":"boolean","mode":"[Read-Write]"},"rotatable":{"name":"rotatable","doc":"When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated","type":"boolean","mode":"[Read-Write]"},"operable":{"name":"operable","doc":"Player can't open gui of this entity and he can't quick insert/input stuff in to the entity","type":"boolean","mode":"[Read-Write]"},"health":{"name":"health","doc":"Health of the entity. Setting health to less than 0 will set health to 0, entities","type":"float","mode":"[Read-Write]"},"direction":{"name":"direction","doc":"The current direction this entity is facing.","type":"defines.direction","mode":"[Read-Write]"},"supports_direction":{"name":"supports_direction","doc":"Whether the entity has direction.","type":"boolean","mode":"[Read-only]"},"orientation":{"name":"orientation","doc":"The smooth orientation.","type":"float","mode":"[Read-Write]"},"amount":{"name":"amount","doc":"Count of resource units contained.","type":"uint","mode":"[Read-Write]"},"initial_amount":{"name":"initial_amount","doc":"Count of initial resource units contained.","type":"uint","mode":"[Read-Write]"},"effectivity_modifier":{"name":"effectivity_modifier","doc":"Multiplies the acceleration the vehicle can create for one unit of energy. By default","type":"float","mode":"[Read-Write]"},"consumption_modifier":{"name":"consumption_modifier","doc":"Multiplies the the energy consumption.","type":"float","mode":"[Read-Write]"},"friction_modifier":{"name":"friction_modifier","doc":"Multiplies the car friction rate.","type":"float","mode":"[Read-Write]"},"speed":{"name":"speed","doc":"The current speed of the car.","type":"float","mode":"[Read-Write]"},"stack":{"name":"stack","doc":"Can only be used if this is ItemEntity","type":"LuaItemStack","mode":"[Read-only]"},"prototype":{"name":"prototype","doc":"The entity prototype of this entity.","type":"LuaEntityPrototype","mode":"[Read-only]"},"ghost_prototype":{"name":"ghost_prototype","doc":"The prototype of the entity or tile contained in this ghost.","type":"LuaEntityPrototype or LuaTilePrototype","mode":"[Read-only]"},"drop_position":{"name":"drop_position","doc":"Position where the entity puts its stuff.","type":"Position","mode":"[Read-Write]"},"pickup_position":{"name":"pickup_position","doc":"Where the inserter will pick up items from.","type":"Position","mode":"[Read-Write]"},"drop_target":{"name":"drop_target","doc":"The entity this entity is putting its stuff to or nil if there is no such entity.","type":"LuaEntity","mode":"[Read-only]"},"pickup_target":{"name":"pickup_target","doc":"The entity the inserter will attempt to pick up from. For example, this can be a transport belt or a","type":"LuaEntity","mode":"[Read-only]"},"selected_gun_index":{"name":"selected_gun_index","doc":"Index of the currently selected weapon slot of this character.","type":"uint","mode":"[Read-Write]"},"energy":{"name":"energy","doc":"Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.).","type":"double","mode":"[Read-Write]"},"recipe":{"name":"recipe","doc":"Current recipe being assembled by this machine.","type":"LuaRecipe","mode":"[Read-Write]"},"held_stack":{"name":"held_stack","doc":"The item stack currently held in an inserter's hand.","type":"LuaItemStack","mode":"[Read-only]"},"held_stack_position":{"name":"held_stack_position","doc":"Current position of the inserter's \"hand\".","type":"Position","mode":"[Read-only]"},"train":{"name":"train","doc":"The train this rolling stock belongs to.","type":"LuaTrain","mode":"[Read-only]"},"neighbours":{"name":"neighbours","doc":"When called on an electric pole, this is a dictionary of all connections, indexed","type":"dictionary string → array of LuaEntity or array of LuaEntity or LuaEntity","mode":"[Read-only]"},"fluidbox":{"name":"fluidbox","doc":"","type":"LuaFluidBox","mode":"[Read-Write]"},"backer_name":{"name":"backer_name","doc":"The name of a backer (of Factorio) assigned to a lab or train station / stop.","type":"string","mode":"[Read-Write]"},"time_to_live":{"name":"time_to_live","doc":"The ticks left for a ghost before it's destroyed. Cannot be set higher than","type":"uint","mode":"[Read-Write]"},"color":{"name":"color","doc":"The character or rolling stock color.","type":"Color","mode":"[Read-Write]"},"signal_state":{"name":"signal_state","doc":"The state of this rail signal.","type":"defines.signal_state","mode":"[Read-only]"},"chain_signal_state":{"name":"chain_signal_state","doc":"The state of this chain signal.","type":"uint","mode":"[Read-only]"},"to_be_looted":{"name":"to_be_looted","doc":"Will this entity be picked up automatically when the player walks over it?","type":"boolean","mode":"[Read-Write]"},"crafting_progress":{"name":"crafting_progress","doc":"The current crafting progress, as a number in range [0, 1].","type":"float","mode":"[Read-Write]"},"bonus_progress":{"name":"bonus_progress","doc":"The current productivity bonus progress, as a number in range [0, 1].","type":"float","mode":"[Read-Write]"},"belt_to_ground_type":{"name":"belt_to_ground_type","doc":"\"input\" or \"output\", depending on whether this underground belt goes down or up.","type":"string","mode":"[Read-only]"},"loader_type":{"name":"loader_type","doc":"\"input\" or \"output\", depending on whether this loader puts to or gets from a container.","type":"string","mode":"[Read-only]"},"rocket_parts":{"name":"rocket_parts","doc":"Number of rocket parts in the silo.","type":"uint","mode":"[Read-Write]"},"logistic_network":{"name":"logistic_network","doc":"The logistic network this entity is a part of.","type":"LuaLogisticNetwork","mode":"[Read-only]"},"logistic_cell":{"name":"logistic_cell","doc":"The logistic cell this entity is a part of. Will be nil if this entity is not a part of any logistic cell.","type":"LuaLogisticCell","mode":"[Read-only]"},"item_requests":{"name":"item_requests","doc":"Items this ghost will request when revived or items this item request proxy is reqeusting.","type":"dictionary string → uint","mode":"[Read-Write]"},"player":{"name":"player","doc":"The player connected to this character.","type":"LuaPlayer","mode":"[Read-only]"},"unit_group":{"name":"unit_group","doc":"The unit group this unit is a member of, or nil if none.","type":"LuaUnitGroup","mode":"[Read-only]"},"damage_dealt":{"name":"damage_dealt","doc":"The damage dealt by this turret.","type":"double","mode":"[Read-Write]"},"kills":{"name":"kills","doc":"The number of units killed by this turret.","type":"uint","mode":"[Read-Write]"},"last_user":{"name":"last_user","doc":"The player who built the entity","type":"LuaPlayer","mode":"[Read-Write]"},"electric_buffer_size":{"name":"electric_buffer_size","doc":"The buffer size for the electric energy source or nil if the entity doesn't have an electric energy source.  Note:  Write access is limited to the ElectricEnergyInterface type","type":"double","mode":"[Read-Write]"},"electric_input_flow_limit":{"name":"electric_input_flow_limit","doc":"The input flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.  Note:  Write access is limited to the ElectricEnergyInterface type","type":"double","mode":"[Read-Write]"},"electric_output_flow_limit":{"name":"electric_output_flow_limit","doc":"The output flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.  Note:  Write access is limited to the ElectricEnergyInterface type","type":"double","mode":"[Read-Write]"},"electric_drain":{"name":"electric_drain","doc":"The electric drain for the electric energy source or nil if the entity doesn't have an electric energy source.  Note:  Write access is limited to the ElectricEnergyInterface type","type":"double","mode":"[Read-Write]"},"electric_emissions":{"name":"electric_emissions","doc":"The emissions size for the electric energy source or nil if the entity doesn't have an electric energy source.  Note:  Write access is limited to the ElectricEnergyInterface type","type":"double","mode":"[Read-Write]"},"unit_number":{"name":"unit_number","doc":"The unit number or nil if the entity doesn't have one. This is unique for every entity that has one.","type":"uint","mode":"[Read-only]"},"mining_progress":{"name":"mining_progress","doc":"The mining progress for this mining drill or nil if this isn't a mining drill.","type":"double","mode":"[Read-Write]"},"bonus_mining_progress":{"name":"bonus_mining_progress","doc":"The bonus mining progress for this mining drill or nil if this isn't a mining drill.","type":"double","mode":"[Read-Write]"},"power_production":{"name":"power_production","doc":"The power production specific to the ElectricEnergyInterface entity type.","type":"double","mode":"[Read-Write]"},"power_usage":{"name":"power_usage","doc":"The power usage specific to the ElectricEnergyInterface entity type.","type":"double","mode":"[Read-Write]"},"bounding_box":{"name":"bounding_box","doc":"","type":"BoundingBox","mode":"[Read-only]"},"mining_target":{"name":"mining_target","doc":"The mining target or nil if none","type":"LuaEntity","mode":"[Read-only]"},"circuit_connected_entities":{"name":"circuit_connected_entities","doc":"Entities connected to this entity via the circuit network.","mode":"[Read-only]","type":"circuit_connected_entities"},"circuit_connection_definitions":{"name":"circuit_connection_definitions","doc":"The connection definition for entities connected to this entity via the circuit network.","type":"array of CircuitConnectionDefinition","mode":"[Read-only]"},"request_slot_count":{"name":"request_slot_count","doc":"The number of request slots this entity has.","type":"uint","mode":"[Read-only]"},"filter_slot_count":{"name":"filter_slot_count","doc":"The number of filter slots this inserter or loader has. 0 if not an inserter or loader.","type":"uint","mode":"[Read-only]"},"grid":{"name":"grid","doc":"The equipment grid or nil if this entity doesn't have an equipment grid.","type":"LuaEquipmentGrid","mode":"[Read-only]"},"graphics_variation":{"name":"graphics_variation","doc":"The graphics variation for this entity or nil if this entity doesn't use graphics varaitions.","type":"uint8","mode":"[Read-Write]"},"burner":{"name":"burner","doc":"The burner energy source for this entity or nil if there isn't one.","type":"LuaBurner","mode":"[Read-only]"},"shooting_target":{"name":"shooting_target","doc":"The shooting target for this turret or nil.","type":"LuaEntity","mode":"[Read-Write]"},"stickers":{"name":"stickers","doc":"The sticker entities attached to this entity.","type":"array of LuaEntity","mode":"[Read-only]"},"parameters":{"name":"parameters","doc":"Can only be used if this is ProgrammableSpeaker","type":"ProgrammableSpeakerParameters","mode":"[Read-Write]"},"alert_parameters":{"name":"alert_parameters","doc":"Can only be used if this is ProgrammableSpeaker","type":"ProgrammableSpeakerAlertParameters","mode":"[Read-Write]"},"electric_network_statistics":{"name":"electric_network_statistics","doc":"The electric network statitiscs for this electric pole.","type":"LuaFlowStatistics","mode":"[Read-only]"},"inserter_stack_size_override":{"name":"inserter_stack_size_override","doc":"Sets the stack size limit on this inserter. If the stack size is > than the force stack size limit the value is ignored.","type":"uint","mode":"[Read-Write]"}}},"LuaDecorativePrototype":{"name":"LuaDecorativePrototype","type":"LuaDecorativePrototype","doc":"Prototype of a virtual signal.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"},"collision_box":{"name":"collision_box","doc":"The bounding box used for collision checking.","type":"BoundingBox","mode":"[Read-only]"},"autoplace_specification":{"name":"autoplace_specification","doc":"Autoplace specification for this decorative prototype. nil if none.","type":"AutoplaceSpecification","mode":"[Read-only]"}}},"LuaDamagePrototype":{"name":"LuaDamagePrototype","type":"LuaDamagePrototype","doc":"Prototype of a damage.","properties":{"name":{"name":"name","doc":"Name of this prototype.","type":"string","mode":"[Read-only]"},"order":{"name":"order","doc":"Order string of this prototype.","type":"string","mode":"[Read-only]"},"localised_name":{"name":"localised_name","doc":"","type":"LocalisedString","mode":"[Read-only]"},"localised_description":{"name":"localised_description","doc":"","type":"LocalisedString","mode":"[Read-only]"}}},"LuaCustomTable":{"name":"LuaCustomTable","type":"LuaCustomTable","doc":"Lazily evaluated table.\n For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom\n type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their\n unnecessary construction in some cases.","properties":{"operator []":{"name":"operator []","doc":"Access an element of this custom table.","mode":"[Read-Write]","type":"operator []"},"operator #":{"name":"operator #","doc":"Number of elements in this table.","type":"uint","mode":"[Read-only]"}}},"LuaCustomChartTag":{"name":"LuaCustomChartTag","type":"LuaCustomChartTag","doc":"A custom tag that shows on the map view.","properties":{"destroy":{"name":"destroy()","doc":"Destroys this tag.","args":{},"type":"function"},"icon":{"name":"icon","doc":"","type":"SignalID","mode":"[Read-Write]"},"last_user":{"name":"last_user","doc":"The player who last edited this tag.","type":"LuaPlayer","mode":"[Read-Write]"},"position":{"name":"position","doc":"The position of this tag.","type":"Position","mode":"[Read-only]"},"orientation":{"name":"orientation","doc":"The orientation of this tag.","type":"float","mode":"[Read-Write]"},"text":{"name":"text","doc":"","type":"string","mode":"[Read-Write]"},"target":{"name":"target","doc":"The entity target if any or nil. This is almost always empty.","type":"LuaEntity","mode":"[Read-Write]"},"tag_number":{"name":"tag_number","doc":"The unique ID for this tag on this force.","type":"uint","mode":"[Read-only]"},"force":{"name":"force","doc":"The force this tag belongs to.","type":"LuaForce","mode":"[Read-only]"},"surface":{"name":"surface","doc":"The surface this tag belongs to.","type":"LuaSurface","mode":"[Read-only]"}}},"LuaControlBehavior":{"name":"LuaControlBehavior","type":"LuaControlBehavior"},"LuaControl":{"name":"LuaControl","type":"LuaControl","doc":"This is an abstract base class containing the common functionality between LuaPlayer and character entities\n (see LuaEntity). When accessing these members through a LuaEntity, it must refer to a character\n entity.","properties":{"get_inventory":{"name":"get_inventory(inventory) → LuaInventory","doc":"Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary","returns":"LuaInventory","args":{"inventory":{"doc":"inventory :: defines.inventory","name":"inventory","type":"defines.inventory"}},"type":"function"},"get_quickbar":{"name":"get_quickbar() → LuaInventory","doc":"Get the quickbar belonging to this entity if any.","returns":"LuaInventory","args":{},"type":"function"},"can_insert":{"name":"can_insert(items) → boolean","doc":"Can at least some items be inserted?  Parametersitems :: SimpleItemStack:  Items that would be inserted.Return value true if at least a part of the given items could be inserted into this inventory.","returns":"boolean","args":{"items":{"doc":"items :: SimpleItemStack:  Items that would be inserted.","name":"items","type":"SimpleItemStack"}},"type":"function"},"insert":{"name":"insert(items) → uint","doc":"Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\"","returns":"uint","args":{"items":{"doc":"items :: SimpleItemStack:  Items to insert.","name":"items","type":"SimpleItemStack"}},"type":"function"},"set_gui_arrow":{"name":"set_gui_arrow{type=…}","doc":"Create an arrow which points at this entity. This is used in the tutorial. For examples, see control.lua","args":{"type":{"doc":"Table with the following fields: type :: string:  Where to point to. This field determines what other fields are mandatory.\n     May be \"nowhere\", \"goal\", \"entity_info\", \"active_window\", \"entity\", \"position\",\n     \"crafting_queue\", or \"item_stack\".Additional type-specific parametersentityentity :: LuaEntitypositionposition :: Positioncrafting_queuecrafting_queueindex :: uintitem_stackinventory_index :: uintitem_stack_index :: uintsource :: string:  May be either \"player\" or \"target\".","name":"type","type":"string"}},"type":"function"},"clear_gui_arrow":{"name":"clear_gui_arrow()","doc":"Removes the arrow created by set_gui_arrow.","args":{},"type":"function"},"get_item_count":{"name":"get_item_count(item) → uint","doc":"Get the number of all or some items in this entity.  Parametersitem :: string  (optional):  Prototype name of the item to count. If not specified, count all items.","returns":"uint","args":{"item":{"doc":"item :: string  (optional):  Prototype name of the item to count. If not specified, count all items.","name":"item","type":"string"}},"type":"function"},"has_items_inside":{"name":"has_items_inside() → boolean","doc":"Does this entity have any item inside it?","returns":"boolean","args":{},"type":"function"},"can_reach_entity":{"name":"can_reach_entity(entity) → boolean","doc":"Can a given entity be opened or accessed?  Parametersentity :: LuaEntity","returns":"boolean","args":{"entity":{"doc":"entity :: LuaEntity","name":"entity","type":"LuaEntity"}},"type":"function"},"clear_items_inside":{"name":"clear_items_inside()","doc":"Remove all items from this entity.","args":{},"type":"function"},"remove_item":{"name":"remove_item(items) → uint","doc":"Remove items from this entity.  Parametersitems :: SimpleItemStack:  Items to remove.Return value Number of items actually removed.","returns":"uint","args":{"items":{"doc":"items :: SimpleItemStack:  Items to remove.","name":"items","type":"SimpleItemStack"}},"type":"function"},"teleport":{"name":"teleport(position, surface) → boolean","doc":"Teleport the entity to a given position, possibly on another surface.","returns":"boolean","args":{"position":{"doc":"position :: Position:  Where to teleport to.","name":"position","type":"Position"},"surface":{"doc":"surface :: SurfaceSpecification  (optional):  Surface to teleport to. If not given, will teleport\n   to the entity's current surface.","name":"surface","type":"SurfaceSpecification"}},"type":"function"},"update_selected_entity":{"name":"update_selected_entity(position)","doc":"Select an entity, as if by hovering the mouse above it. Parametersposition :: Position:  Position of the entity to select","args":{"position":{"doc":"position :: Position:  Position of the entity to select","name":"position","type":"Position"}},"type":"function"},"clear_selected_entity":{"name":"clear_selected_entity()","doc":"Unselect any selected entity.","args":{},"type":"function"},"disable_flashlight":{"name":"disable_flashlight()","doc":"Disable the flashlight.","args":{},"type":"function"},"enable_flashlight":{"name":"enable_flashlight()","doc":"Enable the flashlight.","args":{},"type":"function"},"get_craftable_count":{"name":"get_craftable_count(recipe) → uint","doc":"Gets the count of the given recipe that can be crafted.","returns":"uint","args":{"recipe":{"doc":"recipe :: string or LuaRecipe:  The recipe.","name":"recipe","type":"string or LuaRecipe"}},"type":"function"},"begin_crafting":{"name":"begin_crafting{count=…, recipe=…, silent=…} → uint","doc":"Begins crafting the given count of the given recipe","returns":"uint","args":{"count":{"doc":"count :: uint:  The count to craft.recipe :: string or LuaRecipe:  The recipe to craft.silent :: boolean  (optional):  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.","name":"count","type":"uint"},"count=…":{"name":"count=…","type":"count=…"},"recipe=…":{"name":"recipe=…","type":"recipe=…"},"silent=…":{"name":"silent=…","type":"silent=…"}},"type":"function"},"cancel_crafting":{"name":"cancel_crafting(options)","doc":"Cancels crafting the given count of the given crafting queue index Parametersoptions: : index :: uint:  The crafting queue index.count :: uint:  The count to cancel crafting.","args":{"options":{"doc":"options: : index :: uint:  The crafting queue index.count :: uint:  The count to cancel crafting.","name":"options","type":"uint"}},"type":"function"},"surface":{"name":"surface","doc":"The surface this entity is currently on.","type":"LuaSurface","mode":"[Read-only]"},"position":{"name":"position","doc":"Current position of the entity.","type":"Position","mode":"[Read-only]"},"vehicle":{"name":"vehicle","doc":"The vehicle the player is currently sitting in; nil if none.","type":"LuaEntity","mode":"[Read-only]"},"force":{"name":"force","doc":"The force of this entity. Reading will always give a LuaForce, but it is possible to","type":"string or LuaForce","mode":"[Read-Write]"},"selected":{"name":"selected","doc":"The currently selected entity; nil if none.","type":"LuaEntity","mode":"[Read-only]"},"opened":{"name":"opened","doc":"The GUI target the player currently has open; nil if none.","type":"LuaEntity or LuaItemStack or LuaEquipment or defines.gui_type","mode":"[Read-Write]"},"crafting_queue_size":{"name":"crafting_queue_size","doc":"Size of the crafting queue.","type":"uint","mode":"[Read-only]"},"walking_state":{"name":"walking_state","doc":"Current walking state. It is a table with two fields: walking :: boolean:  If false, the player is currently not walking; otherwise it's going somewheredirection :: defines.direction:  Direction where the player is walking Example","mode":"[Read-Write]","type":"walking_state"},"riding_state":{"name":"riding_state","doc":"Current riding state of this car or the vehicle this player is riding in. It is a table with two fields: acceleration :: defines.riding.accelerationdirection :: defines.riding.direction","mode":"[Read-Write]","type":"riding_state"},"mining_state":{"name":"mining_state","doc":"Current mining state. It is a table with two fields: mining :: boolean:  Whether the player is mining at allposition :: Position  (optional):  What the player is mining; not necessary when mining is false.","mode":"[Read-Write]","type":"mining_state"},"shooting_state":{"name":"shooting_state","doc":"Current shooting state. It is a table with two fields: state :: defines.shooting:  The current stateposition :: Position:  The position being shot at","mode":"[Read-Write]","type":"shooting_state"},"picking_state":{"name":"picking_state","doc":"Current item-picking state.","type":"boolean","mode":"[Read-Write]"},"repair_state":{"name":"repair_state","doc":"Current repair state. It is a table with two fields: repairing :: boolean:  The current stateposition :: Position:  The position being repaired","mode":"[Read-Write]","type":"repair_state"},"cursor_stack":{"name":"cursor_stack","doc":"The player's cursor stack.","type":"LuaItemStack","mode":"[Read-only]"},"driving":{"name":"driving","doc":"true if the player is in a vehicle. Writing to this attribute puts the player in or out of a","type":"boolean","mode":"[Read-Write]"},"crafting_queue":{"name":"crafting_queue","doc":"Gets the current crafting queue items.  Each CraftingQueueItem is a table: index :: uint:  The crafting queue indexrecipe :: string:  The recipe.count :: uint:  The count being crafted.","type":"array of CraftingQueueItem","mode":"[Read-only]"},"cheat_mode":{"name":"cheat_mode","doc":"When true hand crafting is free and instant","type":"boolean","mode":"[Read-Write]"},"character_crafting_speed_modifier":{"name":"character_crafting_speed_modifier","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"double","mode":"[Read-Write]"},"character_mining_speed_modifier":{"name":"character_mining_speed_modifier","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"double","mode":"[Read-Write]"},"character_running_speed_modifier":{"name":"character_running_speed_modifier","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"double","mode":"[Read-Write]"},"character_build_distance_bonus":{"name":"character_build_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_item_drop_distance_bonus":{"name":"character_item_drop_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_reach_distance_bonus":{"name":"character_reach_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_resource_reach_distance_bonus":{"name":"character_resource_reach_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_item_pickup_distance_bonus":{"name":"character_item_pickup_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_loot_pickup_distance_bonus":{"name":"character_loot_pickup_distance_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"quickbar_count_bonus":{"name":"quickbar_count_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_inventory_slots_bonus":{"name":"character_inventory_slots_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_logistic_slot_count_bonus":{"name":"character_logistic_slot_count_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_trash_slot_count_bonus":{"name":"character_trash_slot_count_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_maximum_following_robot_count_bonus":{"name":"character_maximum_following_robot_count_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"uint","mode":"[Read-Write]"},"character_health_bonus":{"name":"character_health_bonus","doc":"Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).","type":"float","mode":"[Read-Write]"},"auto_trash_filters":{"name":"auto_trash_filters","doc":"The auto-trash filters. The keys are item prototype names, the values are the slot values.  Note:  When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character).Example","type":"dictionary string → uint","mode":"[Read-Write]"},"opened_gui_type":{"name":"opened_gui_type","doc":"Returns the defines.gui_type or nil.","mode":"[Read-only]","type":"opened_gui_type"},"build_distance":{"name":"build_distance","doc":"The build distance of this character or max uint when not a character or player connected to a character.","type":"uint","mode":"[Read-only]"},"drop_item_distance":{"name":"drop_item_distance","doc":"The item drop distance of this character or max uint when not a character or player connected to a character.","type":"uint","mode":"[Read-only]"},"reach_distance":{"name":"reach_distance","doc":"The reach distance of this character or max uint when not a character or player connected to a character.","type":"uint","mode":"[Read-only]"},"item_pickup_distance":{"name":"item_pickup_distance","doc":"The item pickup distance of this character or max double when not a character or player connected to a character.","type":"double","mode":"[Read-only]"},"loot_pickup_distance":{"name":"loot_pickup_distance","doc":"The loot pickup distance of this character or max double when not a character or player connected to a character.","type":"double","mode":"[Read-only]"},"resource_reach_distance":{"name":"resource_reach_distance","doc":"The resource reach distance of this character or max double when not a character or player connected to a character.","type":"double","mode":"[Read-only]"}}}}