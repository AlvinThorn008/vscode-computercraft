{
    "bit": {
        "name": "bit",
        "type": "field",
        "doc": "Bit manipulation API",
        "inherits": [],
        "properties": {
            "blshift": {
                "name": "blshift",
                "type": "function",
                "returns": "number",
                "doc": "Shifts bits left",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "brshift": {
                "name": "brshift",
                "type": "function",
                "doc": "Shifts bits right arithmetically",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "blogic_rshift": {
                "name": "blogic_rshift",
                "type": "function",
                "doc": "Shifts bits right logically",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "bxor": {
                "name": "bxor",
                "type": "function",
                "doc": "Performs an exclusive OR on two numbers",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "bor": {
                "name": "bor",
                "type": "function",
                "doc": "Performs an OR on two numbers",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "band": {
                "name": "band",
                "type": "function",
                "doc": "Performs an AND on two numbers",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "bnot": {
                "name": "bnot",
                "type": "function",
                "doc": "Performs a NOT on a number",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            }
        }
    },
    "colors": {
        "name": "colors",
        "type": "field",
        "inherits": [],
        "doc": "Provides constants for colors",
        "properties": {
            "combine": {
                "name": "combine",
                "type": "function",
                "doc": "Combines one or more colors (or sets of colors) into a larger set.",
                "returns": "color",
                "args": {
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First color"
                    },
                    "color2": {
                        "name": "color2",
                        "type": "color",
                        "doc": "Second color"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colors"
                    }
                }
            },
            "subtract": {
                "name": "subtract",
                "type": "function",
                "doc": "Removes one or more colors (or sets of colors) from an initial set.",
                "returns": "color",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "Combined color"
                    },
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First color"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colors"
                    }
                }
            },
            "test": {
                "name": "test",
                "type": "function",
                "doc": "Tests whether color is contained within colors.",
                "returns": "boolean",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "A set of colors"
                    },
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to test for"
                    }
                }
            },
            "white": {
                "name": "white",
                "type": "color",
                "doc": "White"
            },
            "orange": {
                "name": "orange",
                "type": "color",
                "doc": "Orange"
            },
            "magenta": {
                "name": "magenta",
                "type": "color",
                "doc": "Magenta"
            },
            "lightBlue": {
                "name": "lightBlue",
                "type": "color",
                "doc": "Light blue"
            },
            "yellow": {
                "name": "yellow",
                "type": "color",
                "doc": "Yellow"
            },
            "lime": {
                "name": "lime",
                "type": "color",
                "doc": "Lime"
            },
            "pink": {
                "name": "pink",
                "type": "color",
                "doc": "Pink"
            },
            "gray": {
                "name": "gray",
                "type": "color",
                "doc": "Gray"
            },
            "lightGray": {
                "name": "lightGray",
                "type": "color",
                "doc": "Light gray"
            },
            "cyan": {
                "name": "cyan",
                "type": "color",
                "doc": "Cyan"
            },
            "purple": {
                "name": "purple",
                "type": "color",
                "doc": "Purple"
            },
            "blue": {
                "name": "blue",
                "type": "color",
                "doc": "Blue"
            },
            "brown": {
                "name": "brown",
                "type": "color",
                "doc": "Brown"
            },
            "green": {
                "name": "green",
                "type": "color",
                "doc": "Green"
            },
            "red": {
                "name": "red",
                "type": "color",
                "doc": "Red"
            },
            "black": {
                "name": "black",
                "type": "color",
                "doc": "Black"
            }
        }
    },
    "colours": {
        "name": "colours",
        "type": "field",
        "inherits": [],
        "doc": "Provides constants for colours (UK)",
        "properties": {
            "combine": {
                "name": "combine",
                "type": "function",
                "doc": "Combines one or more colours (or sets of colours) into a larger set.",
                "returns": "color",
                "args": {
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First colour"
                    },
                    "color2": {
                        "name": "color2",
                        "type": "color",
                        "doc": "Second colour"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colours"
                    }
                }
            },
            "subtract": {
                "name": "subtract",
                "type": "function",
                "doc": "Removes one or more colours (or sets of colours) from an initial set.",
                "returns": "color",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "Combined colour"
                    },
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First colour"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colours"
                    }
                }
            },
            "test": {
                "name": "test",
                "type": "function",
                "doc": "Tests whether colour is contained within colours.",
                "returns": "boolean",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "A set of colours"
                    },
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The colour to test for"
                    }
                }
            },
            "white": {
                "name": "white",
                "type": "color",
                "doc": "White"
            },
            "orange": {
                "name": "orange",
                "type": "color",
                "doc": "Orange"
            },
            "magenta": {
                "name": "magenta",
                "type": "color",
                "doc": "Magenta"
            },
            "lightBlue": {
                "name": "lightBlue",
                "type": "color",
                "doc": "Light blue"
            },
            "yellow": {
                "name": "yellow",
                "type": "color",
                "doc": "Yellow"
            },
            "lime": {
                "name": "lime",
                "type": "color",
                "doc": "Lime"
            },
            "pink": {
                "name": "pink",
                "type": "color",
                "doc": "Pink"
            },
            "grey": {
                "name": "grey",
                "type": "color",
                "doc": "Grey"
            },
            "lightGrey": {
                "name": "lightGrey",
                "type": "color",
                "doc": "Light grey"
            },
            "cyan": {
                "name": "cyan",
                "type": "color",
                "doc": "Cyan"
            },
            "purple": {
                "name": "purple",
                "type": "color",
                "doc": "Purple"
            },
            "blue": {
                "name": "blue",
                "type": "color",
                "doc": "Blue"
            },
            "brown": {
                "name": "brown",
                "type": "color",
                "doc": "Brown"
            },
            "green": {
                "name": "green",
                "type": "color",
                "doc": "Green"
            },
            "red": {
                "name": "red",
                "type": "color",
                "doc": "Red"
            },
            "black": {
                "name": "black",
                "type": "color",
                "doc": "Black"
            }
        }
    },
    "commands": {
        "name": "commands",
        "type": "field",
        "inherits": [],
        "doc": "Command computers only: allows executing Minecraft commands",
        "properties": {
            "exec": {
                "name": "exec",
                "type": "function",
                "doc": "Executes a command string synchronously",
                "returns": "boolean, table",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command string to run"
                    }
                }
            },
            "execAsync": {
                "name": "execAsync",
                "type": "function",
                "doc": "Executes a command string asynchronously",
                "returns": "number",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command string to run"
                    }
                }
            },
            "list": {
                "name": "list",
                "type": "function",
                "doc": "Returns a list of commands",
                "returns": "table",
                "args": {}
            },
            "getBlockPosition": {
                "name": "getBlockPosition",
                "type": "function",
                "doc": "Returns the world position of the computer",
                "returns": "number, number, number",
                "args": {}
            },
            "getBlockInfo": {
                "name": "getBlockInfo",
                "type": "function",
                "doc": "Returns information about the block at a position",
                "returns": "table",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "Y coordinate"
                    },
                    "z": {
                        "name": "z",
                        "type": "number",
                        "doc": "Z coordinate"
                    }
                }
            },
            "getBlockInfos": {
                "name": "getBlockInfos",
                "type": "function",
                "doc": "Returns information about blocks between two positions",
                "returns": "table",
                "args": {
                    "x1": {
                        "name": "x1",
                        "type": "number",
                        "doc": "First X coordinate"
                    },
                    "y1": {
                        "name": "y1",
                        "type": "number",
                        "doc": "First Y coordinate"
                    },
                    "z1": {
                        "name": "z1",
                        "type": "number",
                        "doc": "First Z coordinate"
                    },
                    "x2": {
                        "name": "x2",
                        "type": "number",
                        "doc": "Second X coordinate"
                    },
                    "y2": {
                        "name": "y2",
                        "type": "number",
                        "doc": "Second Y coordinate"
                    },
                    "z2": {
                        "name": "z2",
                        "type": "number",
                        "doc": "Second Z coordinate"
                    }
                }
            }
        }
    },
    "coroutine": {
        "name": "coroutine",
        "type": "field",
        "doc": "Creates and manages parallel tasks",
        "inherits": [],
        "properties": {
            "create": {
                "name": "create",
                "type": "function",
                "doc": "Creates a coroutine",
                "returns": "coroutine",
                "args": {
                    "f": {
                        "name": "f",
                        "type": "function",
                        "doc": "The function to run"
                    }
                }
            },
            "resume": {
                "name": "resume",
                "type": "function",
                "doc": "Starts or resumes a coroutine",
                "returns": "any",
                "args": {
                    "coro": {
                        "name": "coro",
                        "type": "coroutine",
                        "doc": "The coroutine to resume"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any parameters to pass to the function, or values to return from coroutine.yield()"
                    }
                }
            },
            "running": {
                "name": "running",
                "type": "function",
                "doc": "Returns the currently running coroutine",
                "returns": "coroutine",
                "args": {}
            },
            "status": {
                "name": "status",
                "type": "function",
                "doc": "Returns the status of a coroutine",
                "returns": "string",
                "args": {
                    "coro": {
                        "name": "coro",
                        "type": "coroutine",
                        "doc": "The coroutine to check"
                    }
                }
            },
            "wrap": {
                "name": "wrap",
                "type": "function",
                "doc": "Wraps a coroutine in a function",
                "returns": "function",
                "args": {
                    "f": {
                        "name": "f",
                        "type": "function",
                        "doc": "The function to run"
                    }
                }
            },
            "yield": {
                "name": "yield",
                "type": "function",
                "doc": "Pauses the current coroutine and returns execution to the caller",
                "returns": "any",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any values to return from coroutine.resume()"
                    }
                }
            }
        },
        "disk": {
            "name": "disk",
            "type": "field",
            "inherits": [],
            "doc": "Allows accessing data about disk drives",
            "properties": {
                "isPresent": {
                    "name": "isPresent",
                    "type": "function",
                    "doc": "Returns whether an item is in the drive",
                    "returns": "boolean",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "hasData": {
                    "name": "hasData",
                    "type": "function",
                    "doc": "Returns whether a floppy disk is in the drive",
                    "returns": "boolean",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "getMountPath": {
                    "name": "getMountPath",
                    "type": "function",
                    "doc": "Returns the mount point of the disk",
                    "returns": "string/nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "setLabel": {
                    "name": "setLabel",
                    "type": "function",
                    "doc": "Sets the label of a disk",
                    "returns": "nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        },
                        "label": {
                            "name": "label",
                            "type": "string",
                            "doc": "The name of the disk"
                        }
                    }
                },
                "getLabel": {
                    "name": "getLabel",
                    "type": "function",
                    "doc": "Returns the label of a floppy disk",
                    "returns": "string/nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "getID": {
                    "name": "getID",
                    "type": "function",
                    "doc": "Returns the ID of a disk",
                    "returns": "number/nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "hasAudio": {
                    "name": "hasAudio",
                    "type": "function",
                    "doc": "Returns whether a music disc is in the drive",
                    "returns": "boolean",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "getAudioTitle": {
                    "name": "getAudioTitle",
                    "type": "function",
                    "doc": "Returns the name of the music disc inserted",
                    "returns": "string/nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "playAudio": {
                    "name": "playAudio",
                    "type": "function",
                    "doc": "Plays the music disc in the drive",
                    "returns": "nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "stopAudio": {
                    "name": "stopAudio",
                    "type": "function",
                    "doc": "Stops the music disc in the drive",
                    "returns": "nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                },
                "eject": {
                    "name": "eject",
                    "type": "function",
                    "doc": "Ejects the object from the drive",
                    "returns": "nil",
                    "args": {
                        "side": {
                            "name": "side",
                            "type": "string",
                            "doc": "The side to check"
                        }
                    }
                }
            }
        }
    }
}